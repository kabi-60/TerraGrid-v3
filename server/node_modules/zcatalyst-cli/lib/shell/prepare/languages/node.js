'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fn_utils_1 = require("../../../fn-utils");
const runtime_store_1 = __importDefault(require("../../../runtime-store"));
const throbber_1 = __importDefault(require("../../../throbber"));
const constants_1 = require("../../../util_modules/constants");
const fs_1 = require("../../../util_modules/fs");
exports.default = (targets) => __awaiter(void 0, void 0, void 0, function* () {
    if (targets === undefined || targets.length === 0) {
        return;
    }
    const throbber = throbber_1.default.getInstance();
    yield fn_utils_1.fnUtils.node.validate(targets, 0);
    const nodeTargets = targets
        .filter((target) => {
        if (!target.valid) {
            throbber.remove('function_serve_' + target.name);
        }
        return target.valid;
    })
        .map((target) => {
        fn_utils_1.fnUtils.common.generateUrlForTarget(target);
        return target;
    });
    return Promise.all(nodeTargets.map((target) => __awaiter(void 0, void 0, void 0, function* () {
        const buildPath = (0, path_1.join)(runtime_store_1.default.get('project.root'), constants_1.FOLDERNAME.build, constants_1.FOLDERNAME.functions, target.name);
        yield fs_1.ASYNC.emptyDir(buildPath);
        yield fs_1.ASYNC.copyDir(target.source, buildPath);
        throbber.remove('function_serve_' + target.name);
        return target;
    })));
});
