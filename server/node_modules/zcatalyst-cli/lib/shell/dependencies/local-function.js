'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const http_1 = __importDefault(require("http"));
const error_1 = __importDefault(require("../../error"));
const fn_utils_1 = require("../../fn-utils");
const credential_1 = __importDefault(require("../../internal/credential"));
const port_resolver_1 = __importDefault(require("../../port-resolver"));
const userConfig_1 = __importDefault(require("../../userConfig"));
const runtime_store_1 = __importDefault(require("../../runtime-store"));
const constants_1 = require("../../util_modules/constants");
const runtime_1 = __importDefault(require("../../util_modules/constants/lib/runtime"));
const fs_1 = require("../../util_modules/fs");
const js_1 = require("../../util_modules/js");
const logger_1 = require("../../util_modules/logger");
const project_1 = require("../../util_modules/project");
const shell_1 = require("../../util_modules/shell");
const http_functions_1 = require("../dependencies/http-functions");
const ensure_java_userconfig_1 = require("../../fn-utils/lib/ensure-java-userconfig");
class LocalFunction {
    constructor(repl, target) {
        var _a, _b, _c;
        if (target.type === undefined ||
            !Object.values(constants_1.FN_TYPE).includes(target.type)) {
            throw new error_1.default('target type is not defined', { exit: 2 });
        }
        this.repl = repl;
        this.watcher = target.watcher;
        this.target = js_1.JS.omit(target, ['zip_stream', 'watcher']);
        this.slave = null;
        this.nodeInvoker = (0, path_1.normalize)((0, path_1.join)(__dirname, './invoker', target.type, 'node.mjs'));
        const projectRoot = runtime_store_1.default.get('project.root');
        this.javaInvoker = (0, path_1.join)(projectRoot, constants_1.FOLDERNAME.build, '.catalyst', target.stack, 'Java' + target.type + 'Invoker');
        if ((_a = target.stack) === null || _a === void 0 ? void 0 : _a.startsWith(runtime_1.default.language.java.value)) {
            fn_utils_1.fnUtils.java.ensureJavaInvoker(this.javaInvoker, (0, path_1.normalize)((0, path_1.join)(__dirname, './invoker', target.type, 'java', 'Java' + target.type + 'Invoker.java')), target);
        }
        this.responseFile = (0, path_1.join)(projectRoot, constants_1.FOLDERNAME.build, '.catalyst', 'user_res_body');
        this.metaFile = (0, path_1.join)(projectRoot, constants_1.FOLDERNAME.build, '.catalyst', 'user_meta.json');
        this.call = this._call.bind(this);
        (_b = this.watcher) === null || _b === void 0 ? void 0 : _b.on('preparing', () => {
            if (!this.repl.paused) {
                this.repl.pause();
            }
        });
        (_c = this.watcher) === null || _c === void 0 ? void 0 : _c.on('compiled', () => {
            (0, logger_1.labeled)(`functions[${target.name}]`, 'ready!').MESSAGE();
            if (this.repl.paused) {
                repl.resume();
                repl.showPrompt();
            }
            setTimeout(() => {
                var _a;
                (_a = this.watcher) === null || _a === void 0 ? void 0 : _a.emit('next');
            }, 1000);
        });
    }
    _call(rawData = {}) {
        let data;
        try {
            data = JSON.stringify(rawData);
            if (!data.startsWith('{') || !data.endsWith('}')) {
                const content = fs_1.SYNC.readFile((0, path_1.resolve)(runtime_store_1.default.get('cwd'), data.slice(1, data.length - 1)));
                if (content === undefined) {
                    return new error_1.default('content is undefined for provided file path');
                }
                data = content;
            }
        }
        catch (e) {
            (0, logger_1.info)('the input must be in the form of json or a path to a file containing json data.');
            return new error_1.default('Invalid input');
        }
        if (this.target.type === constants_1.FN_TYPE.event && !data.includes('event_bus_details')) {
            (0, logger_1.info)('For event function kindly use event:generate command to generate the input json.');
            (0, logger_1.info)('You can also provide event details as per documentation.');
            return new error_1.default('Event bus details missing');
        }
        return (() => __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d, _e, _f;
            const projectRoot = runtime_store_1.default.get('project.root');
            const accessToken = yield credential_1.default.getAccessToken();
            const slaveOptions = [];
            const debugPort = runtime_store_1.default.get('context.port.debug.' + constants_1.FN_TYPE.basic, null);
            yield fs_1.ASYNC.ensureFile(this.responseFile, true);
            yield fs_1.ASYNC.ensureFile(this.metaFile, true);
            const slaveFnTarget = { index: this.target.index, name: this.target.name };
            if ((_a = this.target.stack) === null || _a === void 0 ? void 0 : _a.startsWith(runtime_1.default.language.node.value)) {
                if (debugPort !== null) {
                    slaveOptions.push('--inspect-brk=' + debugPort);
                }
                slaveOptions.push(this.nodeInvoker);
                slaveOptions.push(JSON.stringify(slaveFnTarget));
                slaveOptions.push(data);
                slaveOptions.push(JSON.stringify({
                    'x-zc-projectid': (0, project_1.getProjectId)(),
                    'x-zc-project-domain': (0, project_1.getDomainPrefix)() + '.' + constants_1.ORIGIN.app.replace('https://', ''),
                    'x-zc-project-key': (0, project_1.getDomainKey)(),
                    'x-zc-environment': (0, project_1.getEnvName)()
                }));
                slaveOptions.push(JSON.stringify({
                    'x-zc-user-cred-type': 'token',
                    'x-zc-user-cred-token': accessToken,
                    'x-zc-admin-cred-type': 'token',
                    'x-zc-admin-cred-token': accessToken,
                    'x-zc-user-type': 'admin'
                }));
                slaveOptions.push(JSON.stringify((0, path_1.join)(projectRoot, constants_1.FOLDERNAME.build)));
                this.slave = (0, shell_1.spawn)('node', slaveOptions, {
                    cwd: (0, path_1.join)(projectRoot, constants_1.FOLDERNAME.build, constants_1.FOLDERNAME.functions, this.target.name),
                    stdio: 'pipe',
                    env: Object.assign({ X_ZOHO_CATALYST_IS_LOCAL: 'true', X_ZOHO_CATALYST_FUNCTION_LOADED: 'true', X_ZOHO_CATALYST_ACCOUNTS_URL: constants_1.ORIGIN.auth, X_ZOHO_CATALYST_CONSOLE_URL: constants_1.ORIGIN.admin, CATALYST_PROJECT_TIMEZONE: (0, project_1.getProjectTimezone)(Intl.DateTimeFormat().resolvedOptions().timeZone) }, this.target.env_var)
                }).RAW();
            }
            else if ((_b = this.target.stack) === null || _b === void 0 ? void 0 : _b.startsWith(runtime_1.default.language.java.value)) {
                const javaInvokerDir = (0, path_1.parse)(this.javaInvoker).dir;
                slaveOptions.push('-cp');
                slaveOptions.push(javaInvokerDir + fn_utils_1.fnUtils.java.classPathSep + (0, path_1.join)(javaInvokerDir, 'lib', '*'));
                if (debugPort !== null) {
                    slaveOptions.push('-Xdebug');
                    slaveOptions.push('-Xrunjdwp:transport=dt_socket,address=' + debugPort + ',server=y,suspend=y');
                }
                slaveOptions.push((0, path_1.basename)(this.javaInvoker));
                slaveOptions.push(javaInvokerDir);
                slaveOptions.push(JSON.stringify(slaveFnTarget));
                slaveOptions.push(data);
                slaveOptions.push(JSON.stringify({
                    'x-zc-projectid': (0, project_1.getProjectId)(),
                    'x-zc-project-domain': (0, project_1.getDomainPrefix)() + '.' + constants_1.ORIGIN.app.replace('https://', ''),
                    'x-zc-project-key': (0, project_1.getDomainKey)(),
                    'x-zc-environment': (0, project_1.getEnvName)()
                }));
                slaveOptions.push(JSON.stringify({
                    'x-zc-user-cred-type': 'token',
                    'x-zc-user-cred-token': accessToken,
                    'x-zc-admin-cred-type': 'token',
                    'x-zc-admin-cred-token': accessToken,
                    'x-zc-user-type': 'admin'
                }));
                const configKey = `${this.target.stack}.bin`;
                const userConfigCmd = userConfig_1.default.get(configKey);
                const spawnCommand = (0, ensure_java_userconfig_1.getJavaSpawnCommand)(userConfigCmd, 'java', this.target.stack);
                this.slave = (0, shell_1.spawn)(spawnCommand, slaveOptions, {
                    cwd: (0, path_1.join)(projectRoot, constants_1.FOLDERNAME.build, constants_1.FOLDERNAME.functions, this.target.name),
                    stdio: 'pipe',
                    env: Object.assign({ X_ZOHO_CATALYST_IS_LOCAL: 'true', X_ZOHO_CATALYST_FUNCTION_LOADED: 'true', X_ZOHO_CATALYST_ACCOUNTS_URL: constants_1.ORIGIN.auth, X_ZOHO_CATALYST_CONSOLE_URL: constants_1.ORIGIN.admin, CATALYST_PROJECT_TIMEZONE: (0, project_1.getProjectTimezone)(Intl.DateTimeFormat().resolvedOptions().timeZone) }, this.target.env_var)
                }).RAW();
            }
            else if ((_c = this.target.stack) === null || _c === void 0 ? void 0 : _c.startsWith(runtime_1.default.language.python.value)) {
                const stackVersion = (_d = this.target.stack) === null || _d === void 0 ? void 0 : _d.replace('python_', '');
                const runtimesDir = constants_1.ENVPATH.runtimes.data;
                const httpPort = parseInt(runtime_store_1.default.get('context.port.http.' + constants_1.REMOTE_REF.functions.type[constants_1.FN_TYPE.basic]), 10);
                const runTimePort = yield port_resolver_1.default.getFreePort(httpPort, 20, false);
                yield fs_1.ASYNC.ensureFile(this.responseFile, true);
                yield fs_1.ASYNC.ensureFile(this.metaFile, true);
                slaveOptions.push('-u');
                slaveOptions.push((0, path_1.join)(runtimesDir, runtime_1.default.language.python.value, `zcatalyst_runtime_${stackVersion.replace('_', '')}`, 'main.py'));
                this.slave = (0, shell_1.spawn)(userConfig_1.default.get(`python${stackVersion}.bin`), slaveOptions, {
                    cwd: (0, path_1.join)(projectRoot, constants_1.FOLDERNAME.build, constants_1.FOLDERNAME.functions, this.target.name),
                    stdio: 'pipe',
                    env: Object.assign({ X_ZOHO_CATALYST_IS_LOCAL: 'true', X_ZOHO_CATALYST_FUNCTION_LOADED: 'true', X_ZOHO_CATALYST_ACCOUNTS_URL: constants_1.ORIGIN.auth, X_ZOHO_CATALYST_CONSOLE_URL: constants_1.ORIGIN.admin, X_ZOHO_CATALYST_CODE_LOCATION: (0, path_1.join)(projectRoot, constants_1.FOLDERNAME.build, constants_1.FOLDERNAME.functions, this.target.name), X_ZOHO_CATALYST_SERVER_LISTEN_PORT: runTimePort.toString(), CATALYST_PROJECT_TIMEZONE: (0, project_1.getProjectTimezone)(Intl.DateTimeFormat().resolvedOptions().timeZone) }, this.target.env_var)
                }).RAW();
                this.slave.on('spawn', () => __awaiter(this, void 0, void 0, function* () {
                    const jsonData = JSON.parse(data);
                    jsonData.timestamp = Date.now();
                    const reqJson = JSON.stringify(jsonData);
                    yield (0, http_functions_1.checkIfRuntimeServerRunning)(runTimePort.toString());
                    const req = http_1.default
                        .request(`http://127.0.0.1:${runTimePort}`, {
                        headers: {
                            'x-zc-projectid': (0, project_1.getProjectId)(),
                            'x-zc-project-domain': (0, project_1.getDomainPrefix)() +
                                '.' +
                                constants_1.ORIGIN.app.replace('https://', ''),
                            'x-zc-project-key': (0, project_1.getDomainKey)(),
                            'x-zc-environment': (0, project_1.getEnvName)(),
                            'x-zc-user-cred-type': 'token',
                            'x-zc-user-cred-token': accessToken,
                            'x-zc-admin-cred-type': 'token',
                            'x-zc-admin-cred-token': accessToken,
                            'x-zc-user-type': 'admin',
                            'Content-Length': reqJson.length
                        }
                    }, (resp) => {
                        resp.on('data', (data) => {
                            const respStr = data.toString();
                            fs_1.SYNC.writeFile(this.responseFile, respStr);
                        });
                        resp.on('close', () => {
                            var _a;
                            const metaJson = { response: { statusCode: resp.statusCode } };
                            fs_1.SYNC.writeFile(this.metaFile, JSON.stringify(metaJson));
                            (_a = this.slave) === null || _a === void 0 ? void 0 : _a.kill('SIGINT');
                        });
                    })
                        .on('error', (err) => {
                        var _a;
                        console.log(err);
                        (_a = this.slave) === null || _a === void 0 ? void 0 : _a.kill('SIGINT');
                    });
                    req.write(reqJson);
                    req.end();
                }));
            }
            if (this.slave === null) {
                throw new error_1.default('Slave listening started before initialising', {
                    exit: 2
                });
            }
            (_e = this.slave.stdout) === null || _e === void 0 ? void 0 : _e.on('data', (message) => {
                (0, shell_1.clearLine)(process.stdout);
                (0, logger_1.info)(message.toString());
            });
            (_f = this.slave.stderr) === null || _f === void 0 ? void 0 : _f.on('data', (message) => {
                const errorStr = js_1.JS.trim(message.toString());
                (0, shell_1.clearLine)(process.stdout);
                (0, logger_1.info)(errorStr);
            });
            this.slave.on('exit', (code) => __awaiter(this, void 0, void 0, function* () {
                if (code !== null && code !== 130) {
                    (0, logger_1.info)('[cli] Function execution complete');
                    (0, logger_1.info)();
                    const response = yield fs_1.ASYNC.readFile(this.responseFile);
                    let meta;
                    try {
                        meta = JSON.parse((yield fs_1.ASYNC.readFile(this.metaFile))).response;
                    }
                    catch (err) {
                        meta = {};
                    }
                    switch (this.target.type) {
                        case constants_1.FN_TYPE.basic:
                            (0, logger_1.info)('[response]');
                            (0, logger_1.info)(response);
                            (0, logger_1.info)('[status]');
                            (0, logger_1.info)(meta.statusCode || 200);
                            break;
                        case constants_1.FN_TYPE.cron:
                        case constants_1.FN_TYPE.event:
                            (0, logger_1.info)('[status]');
                            (0, logger_1.info)(response);
                            break;
                        case constants_1.FN_TYPE.integration:
                            (0, logger_1.info)('[response]');
                            (0, logger_1.info)(response);
                            break;
                        default:
                            break;
                    }
                }
                this.repl.showPrompt();
            }));
            return this.slave;
        }))();
    }
    shutdown() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((res) => {
                if (this.slave) {
                    this.slave.kill('SIGINT');
                }
                if (this.watcher) {
                    this.watcher.close().then(res).catch(res);
                }
                else {
                    res();
                }
            });
        });
    }
}
exports.default = LocalFunction;
