'use strict';

import * as path from 'path';
import * as fs from 'fs';
import { pathToFileURL } from 'url';

const args = process.argv.slice(2);
const target = JSON.parse(args[0]);
const userData = JSON.parse(args[1]);
const projectJson = JSON.parse(args[2]);
const authJson = JSON.parse(args[3]);
const buildDir = JSON.parse(args[4]);

const requestFile = path.join(buildDir, '.catalyst', 'user_req_body');
const responseFile = path.join(buildDir, '.catalyst', 'user_res_body');

const writeToFile = (resp) => {
	fs.writeFileSync(responseFile, resp);
};

let body = {};

if (fs.existsSync(requestFile)) {
	const content = fs.readFileSync(requestFile);
	try {
		body = JSON.parse(content.toString());
	} catch (err) {
		body = {};
	}
}

const endTime = 15 * 60 * 1000 + Date.now();

const context = {
	catalystHeaders: Object.assign(projectJson, authJson),
	getMaxExecutionTimeMs: () => 15 * 60 * 1000, // 15 mins
	getRemainingExecutionTimeMs: () => endTime - Date.now(),
	closeWithSuccess: () => {
		writeToFile('SUCCESS');
		process.exit(0);
	},
	closeWithFailure: () => {
		writeToFile('FAILURE');
		process.exit(0);
	}
};
const cronReq = {
	getCronParam: (KEY) => userData[KEY] || body[KEY],
	getAllCronParam: () => (userData && Object.keys(userData).length > 0 ? userData : body),
	getRemainingExecutionCount: () => -1,
	getCronDetails: () => null,
	getProjectDetails: () => projectJson
};

import(pathToFileURL(target.index))
	.then((module) => {
		try {
			if (!('default' in module)) {
				throw new Error('Could not find any default export');
			}
			if (typeof module.default !== 'function') {
				throw new Error('The default export is not a function');
			}
			module.default(cronReq, context);
		} catch (e) {
			// eslint-disable-next-line no-console
			console.error(e);
			writeToFile(
				{
					error: inspect(e)
				},
				{ response: { statusCode: 500 } }
			);
			process.exit(2);
		}
	})
	.catch((e) => {
		// eslint-disable-next-line no-console
		console.error(e);
		writeToFile(
			{
				error: inspect(e)
			},
			{ response: { statusCode: 500 } }
		);
		process.exit(2);
	});
