'use strict';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ansi_colors_1 = require("ansi-colors");
const endpoints_1 = require("../../endpoints");
const command_1 = __importDefault(require("../../internal/command"));
const constants_1 = require("../../util_modules/constants");
const project_1 = __importDefault(require("../../util_modules/constants/project"));
const logger_1 = require("../../util_modules/logger");
const project_2 = require("../../util_modules/project");
exports.default = new command_1.default('project:list')
    .description('List all the Catalyst projects you have access to')
    .needs('auth', [constants_1.SCOPE.projects])
    .needs('config', { optional: true, resolveOnNotFound: true })
    .needs('rc', { optional: true, skipOrgCheck: false })
    .action(() => __awaiter(void 0, void 0, void 0, function* () {
    const cliTable3 = (yield Promise.resolve().then(() => __importStar(require('../../cli_table')))).default;
    const projects = (yield (yield (0, endpoints_1.projectAPI)()).getAllProjects());
    if (projects === undefined || projects.length === 0) {
        (0, logger_1.info)((0, ansi_colors_1.bold)('No projects found.'));
        (0, logger_1.info)();
        return;
    }
    const listTable = new cliTable3();
    listTable.push([
        { hAlign: 'center', content: ansi_colors_1.red.bold('Project Name') },
        { hAlign: 'center', content: ansi_colors_1.red.bold('Project ID') }
    ]);
    const activeProjectId = (0, project_2.getProjectId)(null);
    const defaultProjectId = (0, project_2.getDefaultProjectId)(null);
    projects.forEach((project) => {
        let displayId = project.id + '';
        let displayName = project.project_name;
        let enhance = '';
        if (activeProjectId === displayId) {
            enhance = ' (active)';
        }
        if (defaultProjectId === displayId) {
            enhance += ' (base)';
        }
        if (project.project_type && !project_1.default.accepted_types.includes(project.project_type)) {
            enhance += `(${project.project_type})`;
        }
        if (enhance !== '') {
            displayName = (0, ansi_colors_1.cyan)(displayName + enhance);
            displayId = (0, ansi_colors_1.cyan)(displayId + '');
        }
        listTable.push([displayName, displayId]);
    });
    (0, logger_1.info)('\n' + listTable.toString());
}));
