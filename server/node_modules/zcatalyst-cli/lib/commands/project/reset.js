'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = __importDefault(require("../../internal/command"));
const constants_1 = require("../../util_modules/constants");
const logger_1 = require("../../util_modules/logger");
const project_1 = require("../../util_modules/project");
exports.default = new command_1.default('project:reset')
    .description('Clear an active project selection and reset to the base project')
    .needs('auth', [constants_1.SCOPE.projects])
    .needs('config', { optional: true, resolveOnNotFound: true })
    .needs('rc')
    .action(() => __awaiter(void 0, void 0, void 0, function* () {
    const currentProjectId = (0, project_1.getProjectId)();
    const defaultProjectId = (0, project_1.getDefaultProjectId)();
    if (defaultProjectId === currentProjectId) {
        (0, logger_1.message)('No need to reset already using base project for this directory');
        return;
    }
    yield (0, project_1.makeDefaultProjectActive)();
    (0, logger_1.success)('Successfully made project active');
}));
