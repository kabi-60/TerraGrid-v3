'use strict';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ansi_colors_1 = require("ansi-colors");
const error_1 = __importDefault(require("../../error"));
const command_1 = __importDefault(require("../../internal/command"));
const constants_1 = require("../../util_modules/constants");
exports.default = new command_1.default('iac:status <operation>')
    .description('Displays the status of iac schedule progress')
    .option('--id <id>', 'Schedule id of the import operation.')
    .option('--production', 'flag for pointing to production environment (only for export)')
    .needs('auth', [constants_1.SCOPE.project_import_read, constants_1.SCOPE.project_export_read])
    .needs('config', { optional: true })
    .needs('rc', { optional: true, skipOrgCheck: false })
    .action((operation) => __awaiter(void 0, void 0, void 0, function* () {
    switch (operation) {
        case 'import':
            const { default: deploy } = yield Promise.resolve().then(() => __importStar(require('../../iac/status/deploy')));
            yield deploy();
            break;
        case 'export':
            const { default: bundle } = yield Promise.resolve().then(() => __importStar(require('../../iac/status/bundle')));
            yield bundle();
            break;
        default:
            throw new error_1.default('Unsupported operation', {
                exit: 1,
                errorId: 'S-1',
                arg: [(0, ansi_colors_1.bold)(operation)]
            });
    }
    return;
}));
