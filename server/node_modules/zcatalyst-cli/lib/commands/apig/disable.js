'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ansi_colors_1 = require("ansi-colors");
const endpoints_1 = require("../../endpoints");
const error_1 = __importDefault(require("../../error"));
const command_1 = __importDefault(require("../../internal/command"));
const runtime_store_1 = __importDefault(require("../../runtime-store"));
const constants_1 = require("../../util_modules/constants");
const logger_1 = require("../../util_modules/logger");
exports.default = new command_1.default('apig:disable')
    .description('Disable API Gateway for your project')
    .needs('auth', [constants_1.SCOPE.projects])
    .needs('config')
    .needs('rc')
    .action(() => __awaiter(void 0, void 0, void 0, function* () {
    const api = yield (0, endpoints_1.apigAPI)();
    const response = (yield api.getAPIGStatus());
    (0, logger_1.info)();
    if (response.scheduled) {
        throw new error_1.default('Scheduler in progress', {
            exit: 0,
            errorId: 'DIS-1',
            arg: [(0, ansi_colors_1.bold)('catalyst apig:status')]
        });
    }
    if (response.status) {
        yield api.updateAPIGStatus(false);
    }
    const config = runtime_store_1.default.get('config');
    (0, logger_1.info)('Updating local config');
    config.set('apig.enabled', false);
    yield config.save();
    (0, logger_1.success)('Catalyst API Gateway successfully disabled!');
}));
