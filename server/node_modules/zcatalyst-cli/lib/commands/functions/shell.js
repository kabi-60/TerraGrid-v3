'use strict';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = __importDefault(require("../../internal/command"));
const runtime_store_1 = __importDefault(require("../../runtime-store"));
const constants_1 = require("../../util_modules/constants");
const option_1 = require("../../util_modules/option");
exports.default = new command_1.default('functions:shell')
    .description('Launch a node shell to test emulated functions of any stack or type, other than Advanced I/O functions')
    .option('--http [port]', 'enables http mode for the basicIO functions and start server at specified port' +
    `(default: ${constants_1.DEFAULT.serve_port.http.basicio})`)
    .option('--debug [port]', 'the functions are invoked from local environment enabling debugging options on provided port.' +
    `(default: ${constants_1.DEFAULT.serve_port.debug.basicio})`)
    .option('--ignore-scripts', 'ignore the pre and post lifecycle scripts')
    .option('--watch', 'watch for file and directory changes and enable hot reload' +
    '\n' +
    '(deprecated: The watch mode will be enabled by default. To disable watch mode use the --no-watch option)')
    .option('--no-watch', 'disable watching the files for changes')
    .needs('auth', [constants_1.SCOPE.functions, constants_1.SCOPE.functions_execution])
    .needs('config')
    .needs('rc')
    .action(() => __awaiter(void 0, void 0, void 0, function* () {
    const httpOpt = (0, option_1.getOptionValue)('http', false);
    if (httpOpt && typeof httpOpt !== 'boolean') {
        runtime_store_1.default.set('context.port.http.bio', httpOpt);
    }
    const debugOpt = (0, option_1.getOptionValue)('debug', false);
    if (debugOpt && typeof debugOpt !== 'boolean') {
        runtime_store_1.default.set('context.port.debug.bio', debugOpt);
    }
    return (yield Promise.resolve().then(() => __importStar(require('../../shell')))).default();
}));
