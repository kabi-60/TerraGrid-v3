"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const error_1 = __importDefault(require("../../error"));
const command_1 = __importDefault(require("../../internal/command"));
const userConfig_1 = __importDefault(require("../../userConfig"));
const logger_1 = require("../../util_modules/logger");
exports.default = new command_1.default('config:set <key=value>')
    .description('Set catalyst configuration as a key value pair')
    .action((details) => __awaiter(void 0, void 0, void 0, function* () {
    const args = details.split('=');
    if (args.length !== 2) {
        throw new error_1.default('Invalid parameter passed' +
            `\nplease give the key value pairs splitted by '=' (eg. orgname=zoho) `);
    }
    userConfig_1.default.set(args[0], args[1]);
    (0, logger_1.success)('config updated successfully');
}));
