'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ansi_colors_1 = require("ansi-colors");
const moment_1 = __importDefault(require("moment"));
const endpoints_1 = require("../endpoints");
const error_1 = __importDefault(require("../error"));
const runtime_store_1 = __importDefault(require("../runtime-store"));
const constants_1 = require("../util_modules/constants");
const js_1 = require("../util_modules/js");
const project_1 = require("../util_modules/project");
exports.default = (eventJson, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
    const folderId = options.folder;
    const allFolders = (yield (yield (0, endpoints_1.filestoreAPI)()).getAllFolders());
    const selectedFolder = folderId !== undefined
        ? allFolders.find((folder) => folder.folder_name === folderId || folder.id + '' === folderId)
        : {
            folder_name: js_1.JS.randomString(js_1.JS.random(5, 10)),
            id: js_1.JS.randomNumber(15) + ''
        };
    if (selectedFolder === undefined) {
        const allFoldersFormatted = allFolders.length > 0
            ? allFolders.map((folder) => '* ' + folder.folder_name).join('\n')
            : 'None';
        throw new error_1.default('Invalid folder identifier', {
            exit: 1,
            errorId: 'FSTORE-1',
            arg: [(0, ansi_colors_1.bold)('--folder'), (0, ansi_colors_1.bold)(allFoldersFormatted)]
        });
    }
    eventJson = eventJson.replace(new RegExp(constants_1.PLACEHOLDER.event_data.source_id, 'g'), selectedFolder.id);
    const userDetails = {
        email_id: runtime_store_1.default.get('user.Email'),
        user_id: js_1.JS.randomNumber(15),
        is_confirmed: js_1.JS.random(0, 1) === 1 ? true : false,
        last_name: js_1.JS.randomString(5),
        first_name: js_1.JS.randomString(10),
        zuid: js_1.JS.randomNumber(10)
    };
    const time = (0, moment_1.default)().format('MMM DD, YYYY hh:mm A');
    const data = {
        project_details: {
            id: (0, project_1.getProjectId)(),
            project_name: (0, project_1.getProjectName)()
        },
        folder_details: selectedFolder.id,
        created_time: time,
        file_location: null,
        modified_time: time,
        file_name: js_1.JS.randomString(10) + (js_1.JS.random(0, 1) === 1) ? '.js' : '.txt',
        modified_by: userDetails,
        id: selectedFolder.id,
        created_by: userDetails,
        file_size: parseInt(js_1.JS.randomNumber(6), 10)
    };
    eventJson = eventJson.replace(new RegExp(constants_1.PLACEHOLDER.event_data.rule_id, 'g'), 'NULL');
    return eventJson.replace(new RegExp(constants_1.PLACEHOLDER.event_data.data, 'g'), JSON.stringify(data));
});
