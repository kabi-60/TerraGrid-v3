'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const moment_1 = __importDefault(require("moment"));
const runtime_store_1 = __importDefault(require("../runtime-store"));
const constants_1 = require("../util_modules/constants");
const js_1 = require("../util_modules/js");
exports.default = (eventJson) => __awaiter(void 0, void 0, void 0, function* () {
    const mockTime = (0, moment_1.default)().format('MMM DD, YYYY hh:mm A');
    const data = {
        platform_type: null,
        user_details: {
            email_id: runtime_store_1.default.get('user.Email'),
            role_details: {
                role_name: 'App User',
                role_id: js_1.JS.randomNumber(10)
            },
            zaaid: js_1.JS.randomNumber(10),
            created_time: mockTime,
            invited_time: mockTime,
            modified_time: mockTime,
            user_id: js_1.JS.randomNumber(10),
            is_confirmed: js_1.JS.random(0, 1) === 1 ? true : false,
            last_name: '',
            first_name: js_1.JS.randomString(10),
            zuid: js_1.JS.randomNumber(10),
            status: 'ACTIVE'
        },
        org_id: js_1.JS.randomNumber(10),
        zaid: js_1.JS.randomNumber(10),
        redirect_url: null
    };
    eventJson = eventJson.replace(new RegExp(constants_1.PLACEHOLDER.event_data.source_id, 'g'), 'NULL');
    eventJson = eventJson.replace(new RegExp(constants_1.PLACEHOLDER.event_data.rule_id, 'g'), 'NULL');
    return eventJson.replace(new RegExp(constants_1.PLACEHOLDER.event_data.data, 'g'), JSON.stringify(data));
});
