"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadJavaDependencies = exports.getBrowserLogicFramework = void 0;
const path_1 = require("path");
const util_1 = require("util");
const archiver_1 = __importDefault(require("../../archiver"));
const endpoints_1 = require("../../endpoints");
const prompt_1 = __importDefault(require("../../prompt"));
const browserLogic_1 = __importDefault(require("../../util_modules/constants/lib/browserLogic"));
const fs_1 = require("../../util_modules/fs");
const logger_1 = require("../../util_modules/logger");
function getBrowserLogicFramework(stack) {
    return __awaiter(this, void 0, void 0, function* () {
        const choices = Object.keys(browserLogic_1.default[stack]).map((framework) => {
            return prompt_1.default.choice(framework, {
                value: framework,
                short: framework
            });
        });
        if (choices.length === 0) {
            return '';
        }
        const framework = yield prompt_1.default.ask(prompt_1.default.question('name', 'Please choose a framework to initialize', {
            type: 'list',
            choices
        }));
        return framework.name;
    });
}
exports.getBrowserLogicFramework = getBrowserLogicFramework;
function downloadJavaDependencies(path, deps, isZip = true) {
    return __awaiter(this, void 0, void 0, function* () {
        const _commonAPI = yield (0, endpoints_1.commonAPI)();
        return Promise.all(deps.map((dep) => __awaiter(this, void 0, void 0, function* () {
            try {
                const fileName = (0, path_1.basename)(dep);
                const res = yield _commonAPI.download(dep, fileName);
                yield fs_1.ASYNC.ensureDir(path);
                if (isZip) {
                    const zip = new archiver_1.default();
                    zip.load(res).extract(path);
                    yield zip.finalize();
                }
                else {
                    yield fs_1.ASYNC.writeFile((0, path_1.join)(path, fileName), res);
                }
            }
            catch (err) {
                (0, logger_1.labeled)(`Browser Logic[${name}]`, 'Unable to download the dependencies because of the following error');
                (0, logger_1.error)((0, util_1.inspect)(err));
            }
        })));
    });
}
exports.downloadJavaDependencies = downloadJavaDependencies;
