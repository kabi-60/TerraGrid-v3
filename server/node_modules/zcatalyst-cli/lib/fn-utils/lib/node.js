'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTemplatePath = exports.validate = void 0;
const ansi_colors_1 = require("ansi-colors");
const path_1 = require("path");
const error_1 = __importDefault(require("../../error"));
const npm_install_1 = __importDefault(require("../../init/dependencies/npm-install"));
const constants_1 = require("../../util_modules/constants");
const fs_1 = require("../../util_modules/fs");
const js_1 = require("../../util_modules/js");
function validate(targets, idx) {
    return __awaiter(this, void 0, void 0, function* () {
        if (targets.length < idx + 1) {
            return;
        }
        const currentTarget = targets[idx];
        try {
            const catalystFile = (0, path_1.join)(currentTarget.source, constants_1.FILENAME.catalyst_config);
            const data = yield fs_1.ASYNC.readJSONFile(catalystFile, { checkpath: true });
            if (data === undefined) {
                throw new error_1.default('no ' + constants_1.FILENAME.catalyst_config + ' file found', {
                    exit: 1
                });
            }
            const indexFile = (0, path_1.join)(currentTarget.source, js_1.JS.get(data, 'execution.main', 'index.js'));
            currentTarget.index = indexFile;
            const indexFileExists = yield fs_1.ASYNC.fileExists(indexFile);
            if (!indexFileExists) {
                throw new error_1.default('main file does not exists', {
                    errorId: 'NODE-1',
                    exit: 1,
                    arg: [
                        (0, ansi_colors_1.bold)(currentTarget.index || 'undefined'),
                        (0, ansi_colors_1.bold)(constants_1.FILENAME.catalyst_config),
                        (0, ansi_colors_1.bold)(currentTarget.name)
                    ]
                });
            }
            const nodeModuleExists = yield fs_1.ASYNC.dirExists((0, path_1.join)(currentTarget.source, constants_1.FILENAME.node_modules));
            if (!nodeModuleExists) {
                yield (0, npm_install_1.default)(currentTarget.source, true);
            }
            currentTarget.valid = true;
            return validate(targets, ++idx);
        }
        catch (e) {
            const err = error_1.default.getErrorInstance(e);
            currentTarget.valid = false;
            currentTarget.failure_reason = err.message;
            return validate(targets, ++idx);
        }
    });
}
exports.validate = validate;
function getTemplatePath(fnType, add) {
    switch (fnType) {
        case constants_1.FN_TYPE.browserLogic:
        case constants_1.FN_TYPE.integration: {
            if (!add) {
                throw new error_1.default('Invalid additional parameter', { exit: 2 });
            }
            const fnTemplate = constants_1.TEMPLATE.functions.node[fnType];
            return fnTemplate[add];
        }
        default: {
            return constants_1.TEMPLATE.functions.node[fnType];
        }
    }
}
exports.getTemplatePath = getTemplatePath;
