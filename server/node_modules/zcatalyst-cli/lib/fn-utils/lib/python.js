'use strict';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeRequirements = exports.validate = void 0;
const ansi_colors_1 = require("ansi-colors");
const os_1 = require("os");
const path_1 = __importStar(require("path"));
const error_1 = __importDefault(require("../../error"));
const ensure_python_1 = require("../../init/dependencies/python/ensure-python");
const pip_install_1 = require("../../init/dependencies/python/pip-install");
const constants_1 = require("../../util_modules/constants");
const fs_1 = require("../../util_modules/fs");
const js_1 = require("../../util_modules/js");
const validationResults = {};
function validate(targets, idx) {
    return __awaiter(this, void 0, void 0, function* () {
        if (targets.length < idx + 1) {
            return;
        }
        const currentTarget = targets[idx];
        const stack = currentTarget.stack;
        try {
            if (!stack) {
                throw new error_1.default('unknown function stack', {
                    exit: 1
                });
            }
            const catalystFile = (0, path_1.join)(currentTarget.source, constants_1.FILENAME.catalyst_config);
            const data = yield fs_1.ASYNC.readJSONFile(catalystFile, { checkpath: true });
            if (data === undefined) {
                throw new error_1.default('no ' + constants_1.FILENAME.catalyst_config + ' file found', {
                    exit: 1
                });
            }
            const indexFile = (0, path_1.join)(currentTarget.source, js_1.JS.get(data, 'execution.main', 'main.py'));
            currentTarget.index = indexFile;
            const indexFileExists = yield fs_1.ASYNC.fileExists(indexFile);
            if (!indexFileExists) {
                throw new error_1.default('Entry point file does not exists', {
                    errorId: 'PYTHON-1',
                    exit: 1,
                    arg: [
                        (0, ansi_colors_1.bold)(currentTarget.index || 'undefined'),
                        (0, ansi_colors_1.bold)(constants_1.FILENAME.catalyst_config),
                        (0, ansi_colors_1.bold)(currentTarget.name)
                    ]
                });
            }
            if (!(stack in validationResults)) {
                yield (0, ensure_python_1.ensurePythonWithPip)(stack.replace('python_', '').replace('_', '.'));
                validationResults[stack] = { valid: true };
            }
            if (!validationResults[stack]['valid']) {
                currentTarget.valid = validationResults[stack]['valid'];
                currentTarget.failure_reason = validationResults[stack]['message'];
            }
            else {
                currentTarget.valid = true;
            }
            return validate(targets, ++idx);
        }
        catch (e) {
            const err = error_1.default.getErrorInstance(e);
            currentTarget.valid = false;
            currentTarget.failure_reason = err.message;
            if (stack) {
                validationResults[stack] = { valid: false, message: err.message };
            }
            return validate(targets, ++idx);
        }
    });
}
exports.validate = validate;
function removeRequirements(reqFile, target) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const tmpDir = (0, path_1.join)((0, os_1.tmpdir)(), '.catalyst', 'python', Date.now().toString());
        yield fs_1.ASYNC.ensureDir(tmpDir);
        yield fs_1.ASYNC.emptyDir(tmpDir);
        yield (0, pip_install_1.installRequirements)(reqFile, tmpDir, (_a = target.stack) === null || _a === void 0 ? void 0 : _a.replace('python_', ''), true);
        const files = yield fs_1.ASYNC.walk(tmpDir, { depth: 1, includeDirPaths: true });
        yield Promise.all(files.map((file) => __awaiter(this, void 0, void 0, function* () {
            yield fs_1.ASYNC.deleteFile((0, path_1.join)(target.source, path_1.default.basename(file.path)));
        })));
    });
}
exports.removeRequirements = removeRequirements;
