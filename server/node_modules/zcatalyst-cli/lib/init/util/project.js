"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fillProjectPayload = void 0;
const endpoints_1 = require("../../endpoints");
const error_1 = __importDefault(require("../../error"));
const runtime_store_1 = __importDefault(require("../../runtime-store"));
const constants_1 = require("../../util_modules/constants");
const project_1 = require("../../util_modules/project");
const fillProjectPayload = (selectedOrg, selectedProject, isNew = false, isImport = false) => __awaiter(void 0, void 0, void 0, function* () {
    runtime_store_1.default.set('payload.project', selectedProject);
    runtime_store_1.default.set('project', (0, project_1.transformProject)(selectedProject));
    const envAPI = yield (0, endpoints_1.envAPI)({ auth: true, org: selectedOrg.id });
    const envArr = (yield envAPI.getEnvs((0, project_1.getProjectId)()));
    const envObj = envArr.find((env) => env.env_name === constants_1.DEFAULT.env_name);
    if (envObj === undefined) {
        throw new error_1.default('There is no development environment found for this project. Kindly contact support.', { exit: 2 });
    }
    runtime_store_1.default.set('payload.env', envArr);
    runtime_store_1.default.set('project.env', (0, project_1.transformEnv)(envObj));
    runtime_store_1.default.set('payload.project.new', isNew);
    runtime_store_1.default.set('payload.project.import', isImport);
});
exports.fillProjectPayload = fillProjectPayload;
