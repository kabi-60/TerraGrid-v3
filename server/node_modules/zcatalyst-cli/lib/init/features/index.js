'use strict';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.appsail = exports.project = exports.client = exports.functions = exports.setCatalystConfig = void 0;
const ansi_colors_1 = require("ansi-colors");
const path_1 = require("path");
const error_1 = __importDefault(require("../../error"));
const runtime_store_1 = __importDefault(require("../../runtime-store"));
const constants_1 = require("../../util_modules/constants");
const runtime_1 = __importDefault(require("../../util_modules/constants/lib/runtime"));
const js_1 = require("../../util_modules/js");
const logger_1 = require("../../util_modules/logger");
const project_1 = require("../../util_modules/project");
function upsertEnvArr(envArr, idx = 0) {
    return __awaiter(this, void 0, void 0, function* () {
        if (envArr === null) {
            return upsertEnvArr(envArr, idx + 1);
        }
        if (envArr.length < idx + 1) {
            return;
        }
        const currentEnvObj = envArr[idx];
        const isDefault = currentEnvObj.env_name === constants_1.DEFAULT.env_name;
        yield (0, project_1.upsertEnv)(currentEnvObj.project_details.id + '', currentEnvObj, {
            base: isDefault,
            active: isDefault
        });
        return upsertEnvArr(envArr, idx + 1);
    });
}
function setCatalystConfig(featureName, add) {
    const featureContext = runtime_store_1.default.get('payload.' + featureName, null);
    let featureContextArr = runtime_store_1.default.get('payload.' + featureName + '.targets', null);
    if (featureContext === null && featureContextArr === null) {
        return;
    }
    if (featureContextArr === null && featureContext !== null) {
        featureContextArr = [featureContext];
    }
    if (featureContextArr === null) {
        throw new error_1.default('No context given to populate catalyst.json', {
            exit: 2
        });
    }
    const config = runtime_store_1.default.get('config');
    featureContextArr.forEach((context) => {
        var _a, _b;
        const targetSourceDir = featureName === 'functions' ? (0, path_1.dirname)(context.source) : context.source;
        const targetSource = (0, path_1.relative)((0, project_1.getProjectRoot)(), targetSourceDir);
        switch (featureName) {
            case 'functions':
                const _context = context;
                if (!add) {
                    config.set(featureName + '.targets', [_context.name]);
                    config.set(featureName + '.ignore', ((_a = _context.stack) === null || _a === void 0 ? void 0 : _a.startsWith(runtime_1.default.language.java.value))
                        ? [constants_1.FOLDERNAME.output]
                        : []);
                    config.set(featureName + '.source', targetSource);
                    return;
                }
                const targetArr = config.get(featureName + '.targets', []);
                config.set(featureName + '.targets', js_1.JS.uniq(targetArr.concat([_context.name])));
                const ignoreArr = config.get(featureName + '.ignore', []);
                config.set(featureName + '.ignore', ((_b = _context.stack) === null || _b === void 0 ? void 0 : _b.startsWith(runtime_1.default.language.java.value))
                    ? js_1.JS.uniq(ignoreArr.concat([constants_1.FOLDERNAME.output]))
                    : ignoreArr);
                if (config.get(featureName + '.source') !== targetSource) {
                    (0, logger_1.debug)(featureName + ' source has been modified');
                    config.set(featureName + '.source', targetSource);
                }
                break;
            case 'appsail': {
                const targetArr = config.get('appsail', []);
                config.set('appsail', js_1.JS.uniq(targetArr.concat([context])));
                break;
            }
            case 'client':
                config.set('client.source', targetSource);
                const plugin = runtime_store_1.default.get('payload.client.plugin', false);
                if (plugin) {
                    config.set('client.plugin', plugin);
                }
                else {
                    config.unset('client.plugin');
                }
                break;
            case 'apig':
                config.set('apig.rules', targetSource);
                config.set('apig.enabled', true);
                break;
        }
    });
}
exports.setCatalystConfig = setCatalystConfig;
function functions(add = false) {
    return __awaiter(this, void 0, void 0, function* () {
        yield (yield Promise.resolve().then(() => __importStar(require('./functions/index.js')))).default();
        setCatalystConfig('functions', add);
    });
}
exports.functions = functions;
function client() {
    return __awaiter(this, void 0, void 0, function* () {
        yield (yield Promise.resolve().then(() => __importStar(require('./client/index.js')))).default();
        setCatalystConfig('client', false);
    });
}
exports.client = client;
function project() {
    return __awaiter(this, void 0, void 0, function* () {
        yield (yield Promise.resolve().then(() => __importStar(require('./project.js')))).default();
        const projectPayload = runtime_store_1.default.get('payload.project', null);
        if (!projectPayload) {
            return;
        }
        yield (0, project_1.upsertProject)(projectPayload, {
            base: true,
            active: true
        });
        yield upsertEnvArr(runtime_store_1.default.get('payload.env', null));
        if (runtime_store_1.default.get('payload.project.new', false)) {
            (0, logger_1.message)('New Project has been successfully created and associated with this directory.');
        }
        (0, logger_1.message)((0, ansi_colors_1.bold)(constants_1.FILENAME.rc) + ' file has be successfully created with project details.');
        const isImport = runtime_store_1.default.get('payload.project.import', false);
        if (isImport) {
            setCatalystConfig('functions', true);
            setCatalystConfig('client', false);
        }
    });
}
exports.project = project;
function appsail() {
    return __awaiter(this, void 0, void 0, function* () {
        yield (yield Promise.resolve().then(() => __importStar(require('./appsail/index.js')))).default();
        setCatalystConfig('appsail');
    });
}
exports.appsail = appsail;
exports.default = {
    functions,
    client,
    project,
    appsail
};
