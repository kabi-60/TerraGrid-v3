'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const project_1 = __importDefault(require("../endpoints/lib/project"));
const credential_1 = __importDefault(require("../internal/credential"));
exports.default = (req, _RES, next) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const projectId = req.headers['x-zc-projectid'];
    const projectDomain = req.headers['x-zc-project-domain'];
    const { cookie, authorization } = req.headers;
    const accessToken = yield credential_1.default.getAccessToken();
    const [hasCSRF, hasADT, hasBDT] = Object.keys(req.cookies || {}).reduce((acc, name) => {
        if (name === 'ZD_CSRF_TOKEN' && req.cookies[name]) {
            acc[0] = true;
        }
        if (name.startsWith('_iamadt_client') && req.cookies[name]) {
            acc[1] = true;
        }
        if (name.startsWith('_iambdt_client') && req.cookies[name]) {
            acc[2] = true;
        }
        return acc;
    }, [false, false, false]);
    if (hasCSRF && hasADT && hasBDT) {
        req.headers['x-zc-user-type'] = 'project-user';
        req.headers['x-zc-cookie'] = cookie;
    }
    else if (typeof authorization !== 'undefined') {
        const currentUser = yield new project_1.default({
            origin: 'https://' + projectDomain
        }).getCurrentProjectUser(projectId, { cookie, authorization });
        if (currentUser === null) {
            req.headers['x-zc-user-cred-type'] = 'token';
            req.headers['x-zc-user-cred-token'] = accessToken;
            req.headers['x-zc-user-type'] = 'admin';
        }
        else {
            req.headers['x-zc-user-type'] = 'project-user';
            req.headers['x-zc-user-cred-type'] = 'token';
            req.headers['x-zc-user-cred-token'] = (_a = req.headers.authorization) === null || _a === void 0 ? void 0 : _a.split(' ')[1];
            if (req.headers['x-zc-user-cred-token'] === undefined) {
                next(new Error('Provided "authorization" header is not valid'));
                return;
            }
        }
    }
    else {
        req.headers['x-zc-user-cred-type'] = 'token';
        req.headers['x-zc-user-cred-token'] = accessToken;
        req.headers['x-zc-user-type'] = 'admin';
    }
    req.headers['x-zc-admin-cred-type'] = 'token';
    req.headers['x-zc-admin-cred-token'] = accessToken;
    next();
});
