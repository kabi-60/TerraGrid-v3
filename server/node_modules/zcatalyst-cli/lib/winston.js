'use strict';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = exports.transport = void 0;
const strip_ansi_1 = __importDefault(require("strip-ansi"));
const winston_1 = require("winston");
const config_store_1 = __importDefault(require("./config-store"));
const runtime_store_1 = __importDefault(require("./runtime-store"));
const constants_1 = require("./util_modules/constants");
const env_1 = require("./util_modules/env");
const fs_1 = require("./util_modules/fs");
const version = runtime_store_1.default.get('context.cli.package.version');
const usage = config_store_1.default.get('usage', false);
exports.transport = {
    console: new winston_1.transports.Console({
        level: 'info',
        handleExceptions: false,
        format: winston_1.format.printf((info) => {
            return info.message;
        })
    }),
    log_file: new winston_1.transports.File({
        filename: constants_1.FILENAME.log,
        level: 'debug',
        handleExceptions: true,
        tailable: true,
        format: winston_1.format.combine(winston_1.format.printf((info) => {
            return `[${info.level}] [${new Date().toISOString()}] : ${(0, strip_ansi_1.default)(info.message)}`;
        }))
    }),
    http_log: new winston_1.transports.File({
        filename: fs_1.SYNC.tempFile(constants_1.FILENAME.http_log),
        level: 'debug',
        handleExceptions: true,
        format: winston_1.format.combine((0, winston_1.format)((info) => {
            info.message = (0, strip_ansi_1.default)(info.message);
            return info.message === '' || info.level === 'info' ? false : info;
        })(), winston_1.format.json(), winston_1.format.label({
            label: 'CatalystCLI/' + version
        }), winston_1.format.printf((info) => {
            info._zl_timestamp = Date.now();
            return JSON.stringify(info);
        }))
    })
};
if (process.env.DEBUG || process.argv.slice(2).includes('--verbose')) {
    exports.transport.console.level = 'debug';
    exports.transport.console.format = winston_1.format.combine(winston_1.format.cli({
        colors: { info: 'green', error: 'red', debug: 'blue', warn: 'yellow' }
    }), winston_1.format.timestamp({ format: 'YYYY-MM-DD hh:mm:ss.SSS A' }), winston_1.format.printf((info) => {
        if (exports.transport.console.level === 'info') {
            return info.message;
        }
        return `[${info.timestamp}] ${info.level}: ${info.message}`;
    }));
}
exports.logger = (0, winston_1.createLogger)({
    transports: [exports.transport.console],
    exitOnError: false
});
if (env_1.isWindows || (0, env_1.isPrimaryShell)()) {
    if (usage) {
        exports.logger.add(exports.transport.http_log);
    }
    exports.logger.add(exports.transport.log_file);
}
exports.default = exports.logger;
