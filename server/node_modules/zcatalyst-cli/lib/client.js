'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const commands_1 = __importDefault(require("./commands"));
class Client {
    constructor(program) {
        this.cli = program;
        this.commands = {};
        this.commandPromise = (0, commands_1.default)(this);
    }
    processArgs(args) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.commandPromise;
            const origArgs = args.slice(2);
            if (!origArgs.length || (origArgs.length === 1 && origArgs.pop() === '--verbose')) {
                this.cli.outputHelp();
            }
            else {
                yield this.cli.parseAsync(args);
            }
            return this.cli;
        });
    }
    getCommand(name) {
        for (const command of this.cli.commands) {
            if (command.name() === name || command.alias() === name) {
                return command;
            }
        }
        return null;
    }
    getAllCommandNames() {
        return this.cli.commands.map((cmd) => {
            return cmd.name();
        });
    }
}
exports.Client = Client;
