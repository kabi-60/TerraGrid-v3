'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const open_1 = __importDefault(require("open"));
const logger_1 = require("../../../../util_modules/logger");
const server_js_1 = __importDefault(require("./server.js"));
const plugin_loader_1 = __importDefault(require("../../../../plugin-loader"));
const stream_1 = require("stream");
const error_1 = __importDefault(require("../../../../error"));
const ansi_colors_1 = require("ansi-colors");
const runtime_store_1 = __importDefault(require("../../../../runtime-store"));
exports.default = (details, masterPort) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const target = details.target;
    const servePlugin = yield (0, plugin_loader_1.default)('client', 'start', target.source).catch((err) => (0, logger_1.debug)(err));
    if (typeof servePlugin === 'function') {
        process.env.X_CATALYST_WEBAPP_PATH = target.source;
        const logStreamPlugin = yield (0, plugin_loader_1.default)('client', 'logs', target.source).catch((err) => (0, logger_1.debug)(err));
        if (typeof logStreamPlugin === 'function') {
            const stream = yield logStreamPlugin();
            if (stream instanceof stream_1.Stream) {
                const streamLogFn = (chunk) => (0, logger_1.log)('info', chunk.toString(), true);
                stream.on('data', streamLogFn);
            }
        }
        const event = servePlugin(details, masterPort).catch((e) => {
            var _a;
            const err = error_1.default.getErrorInstance(e, {
                fileName: __filename,
                skipHelp: false
            });
            err.errorId = 'SERVE-IDX-1';
            err.arg = [
                'client',
                (0, ansi_colors_1.bold)(((_a = target.plugins) === null || _a === void 0 ? void 0 : _a.start)[target.source] || 'start'),
                (0, ansi_colors_1.bold)('Error: ') + ansi_colors_1.italic.red(err.message)
            ];
            throw err;
        });
        (0, logger_1.info)();
        (0, logger_1.labeled)(`Client[${target.name}]`, `Plugin : "${runtime_store_1.default.get(`context.client.plugins.start${target.source ? '.' + target.source : ''}`)}" is used for ${details.type} serve`).MESSAGE();
        (0, logger_1.info)();
        return event;
    }
    const clientListener = yield (0, server_js_1.default)(details.httpPort, target.source, {
        homepage: target.homepage,
        enableWatch: ((_a = target.opts) === null || _a === void 0 ? void 0 : _a.watch) || false,
        notFoundPage: target.notFoundPage
    });
    clientListener.addListener('start', () => {
        var _a;
        return ((_a = details.target.opts) === null || _a === void 0 ? void 0 : _a.open) &&
            (0, open_1.default)('http://localhost:' + masterPort).catch();
    });
    return clientListener;
});
