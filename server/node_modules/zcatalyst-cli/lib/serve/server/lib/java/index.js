"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fn_utils_1 = require("../../../../fn-utils");
const ensure_java_userconfig_1 = require("../../../../fn-utils/lib/ensure-java-userconfig");
const plugin_loader_1 = __importDefault(require("../../../../plugin-loader"));
const runtime_store_1 = __importDefault(require("../../../../runtime-store"));
const userConfig_1 = __importDefault(require("../../../../userConfig"));
const constants_1 = require("../../../../util_modules/constants");
const logger_1 = require("../../../../util_modules/logger");
const project_1 = require("../../../../util_modules/project");
const shell_1 = require("../../../../util_modules/shell");
exports.default = (details, masterPort) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d, _e;
    const projectRoot = runtime_store_1.default.get('project.root');
    const javaServer = (0, path_1.join)(projectRoot, constants_1.FOLDERNAME.build, '.catalyst', 'aioserver', 'JavaaioServer');
    const targetDir = (0, path_1.join)(projectRoot, constants_1.FOLDERNAME.build, constants_1.FOLDERNAME.functions, (_a = details.target) === null || _a === void 0 ? void 0 : _a.name);
    const label = `${details.type}[${(_b = details.target) === null || _b === void 0 ? void 0 : _b.name}]`;
    const opts = [
        '-cp',
        (0, path_1.join)(targetDir, '*') + fn_utils_1.fnUtils.java.classPathSep + targetDir + path_1.sep,
        `-DCATALYST_FUNCTION_TYPE=${constants_1.REMOTE_REF.functions.type[details.target.type]}`
    ];
    if (details.debugPort !== -1) {
        (0, logger_1.labeled)(label, 'you can attach your debugger at port : ' + details.debugPort).MESSAGE();
        opts.push('-Xdebug');
        opts.push('-Xrunjdwp:transport=dt_socket,address=' + details.debugPort + ',server=y,suspend=y');
    }
    opts.push((0, path_1.basename)(javaServer));
    opts.push(details.httpPort + '');
    const targetSource = (_c = details.target) === null || _c === void 0 ? void 0 : _c.source;
    const configType = details.type === 'server' ? 'functions' : details.type;
    const servePlugin = yield (0, plugin_loader_1.default)(configType, 'start', targetSource).catch((err) => (0, logger_1.debug)(err));
    if (typeof servePlugin === 'function') {
        const event = servePlugin(details, masterPort);
        (0, logger_1.labeled)(label, `Plugin : "${runtime_store_1.default.get(`context.${configType}.plugins.start${targetSource ? '.' + targetSource : ''}`)}" is used for ${details.type} serve`).MESSAGE();
        return event;
    }
    const configKey = `${(_d = details.target) === null || _d === void 0 ? void 0 : _d.stack}.bin`;
    const userConfigCmd = userConfig_1.default.get(configKey);
    const spawnCommand = (0, ensure_java_userconfig_1.getJavaSpawnCommand)(userConfigCmd, 'java', (_e = details.target) === null || _e === void 0 ? void 0 : _e.stack);
    return (0, shell_1.spawn)(spawnCommand, opts, {
        cwd: targetSource === null || targetSource === void 0 ? void 0 : targetSource.replace(projectRoot, (0, path_1.join)(projectRoot, constants_1.FOLDERNAME.build)),
        stdio: 'pipe',
        env: Object.assign({ X_ZOHO_CATALYST_IS_LOCAL: 'true', X_ZOHO_CATALYST_FUNCTION_LOADED: 'true', X_ZOHO_CATALYST_CODE_LOCATION: targetDir + path_1.sep, X_ZOHO_CATALYST_ACCOUNTS_URL: constants_1.ORIGIN.auth, X_ZOHO_CATALYST_CONSOLE_URL: constants_1.ORIGIN.admin, CATALYST_PROJECT_TIMEZONE: (0, project_1.getProjectTimezone)(Intl.DateTimeFormat().resolvedOptions().timeZone) }, details.target.env_var)
    }).RAW();
});
