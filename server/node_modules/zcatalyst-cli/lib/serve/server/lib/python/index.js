"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const runtime_store_1 = __importDefault(require("../../../../runtime-store"));
const http_functions_1 = require("../../../../shell/dependencies/http-functions");
const userConfig_1 = __importDefault(require("../../../../userConfig"));
const constants_1 = require("../../../../util_modules/constants");
const project_1 = require("../../../../util_modules/project");
const shell_1 = require("../../../../util_modules/shell");
const error_1 = __importDefault(require("../../../../error"));
const logger_1 = require("../../../../util_modules/logger");
exports.default = (details) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    const projectRoot = runtime_store_1.default.get('project.root');
    const targetSource = (_a = details.target) === null || _a === void 0 ? void 0 : _a.source;
    const runtimesDir = constants_1.ENVPATH.runtimes.data;
    const stackVersion = (_b = details.target.stack) === null || _b === void 0 ? void 0 : _b.replace('python_', '');
    const opts = [
        '-u',
        (0, path_1.join)(runtimesDir, constants_1.RUNTIME.language.python.value, `zcatalyst_runtime_${stackVersion === null || stackVersion === void 0 ? void 0 : stackVersion.replace('_', '')}`, 'main.py')
    ];
    return new Promise((resolve, reject) => {
        var _a;
        const child = (0, shell_1.spawn)(userConfig_1.default.get(`python${stackVersion}.bin`), opts, {
            cwd: targetSource === null || targetSource === void 0 ? void 0 : targetSource.replace(projectRoot, (0, path_1.join)(projectRoot, constants_1.FOLDERNAME.build)),
            stdio: 'pipe',
            env: Object.assign({ X_ZOHO_CATALYST_IS_LOCAL: 'true', X_ZOHO_CATALYST_FUNCTION_LOADED: 'true', X_ZOHO_CATALYST_ACCOUNTS_URL: constants_1.ORIGIN.auth, X_ZOHO_CATALYST_CONSOLE_URL: constants_1.ORIGIN.admin, X_ZOHO_CATALYST_CODE_LOCATION: targetSource === null || targetSource === void 0 ? void 0 : targetSource.replace(projectRoot, (0, path_1.join)(projectRoot, constants_1.FOLDERNAME.build)), X_ZOHO_CATALYST_SERVER_LISTEN_PORT: details.httpPort.toString(), CATALYST_PROJECT_TIMEZONE: (0, project_1.getProjectTimezone)(Intl.DateTimeFormat().resolvedOptions().timeZone) }, details.target.env_var)
        }).RAW();
        child.on('spawn', () => __awaiter(void 0, void 0, void 0, function* () {
            yield (0, http_functions_1.checkIfRuntimeServerRunning)(details.httpPort.toString());
        }));
        const errData = [];
        (_a = child.stderr) === null || _a === void 0 ? void 0 : _a.on('data', (chunk) => {
            errData.push(chunk);
        });
        child.on('error', (err) => {
            (0, logger_1.info)(Buffer.concat(errData).toString());
            reject(new error_1.default(`Error while starting python runtime server`, {
                original: err,
                exit: 2
            }));
        });
        resolve(child);
    });
});
