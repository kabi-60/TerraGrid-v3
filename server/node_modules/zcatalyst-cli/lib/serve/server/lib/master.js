'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const http_1 = require("http");
const error_1 = __importDefault(require("../../../error"));
const apig_matcher_1 = __importDefault(require("../../../express_middlewares/apig-matcher"));
const auth_checker_1 = __importDefault(require("../../../express_middlewares/auth-checker"));
const authenticator_1 = __importDefault(require("../../../express_middlewares/authenticator"));
const cookie_parser_1 = __importDefault(require("../../../express_middlewares/cookie-parser"));
const error_handler_1 = __importDefault(require("../../../express_middlewares/error-handler"));
const logger_1 = __importDefault(require("../../../express_middlewares/logger"));
const project_1 = __importDefault(require("../../../express_middlewares/project"));
const unknownReqProxy_1 = __importDefault(require("../../../express_middlewares/unknownReqProxy"));
const url_rewriter_1 = __importDefault(require("../../../express_middlewares/url-rewriter"));
const runtime_store_1 = __importDefault(require("../../../runtime-store"));
const constants_1 = require("../../../util_modules/constants");
const js_1 = require("../../../util_modules/js");
const logger_2 = require("../../../util_modules/logger");
const project_2 = require("../../../util_modules/project");
const option_1 = require("../../../util_modules/option");
const server_js_1 = require("../../../util_modules/server.js");
const http_proxy_1 = require("http-proxy");
const removeSecure = (str) => str.replace(/;\s?Secure/i, '').replace(/;\s?SameSite=None/i, '');
const redirectByAuth = (req, res, redirectUrl) => {
    if (req.headers['x-zc-user-cred-token'] === undefined) {
        res.writeHead(302, { Location: redirectUrl });
        res.end();
    }
    else {
        res.writeHead(302, { Location: '/app/' });
        res.end();
    }
};
const proxyResponseHandler = (systemRoutes) => (proxyRes, req, res) => {
    if (!req.url) {
        return;
    }
    if (req.url.startsWith('/oauthorize')) {
        const set = proxyRes.headers['set-cookie'];
        if (set) {
            const result = Array.isArray(set) ? set.map(removeSecure) : removeSecure(set);
            proxyRes.headers['set-cookie'] = result;
        }
    }
    else if (req.url.startsWith('/baas') || req.url.startsWith('/__catalyst')) {
        if (req.url.includes('/signin-redirect')) {
            if (systemRoutes === undefined) {
                redirectByAuth(req, res, '/app/local-redirect');
                return;
            }
            const sourceRedirectUrl = Object.keys(systemRoutes).find((sourceUrl) => {
                const methodByConfig = systemRoutes ? systemRoutes[sourceUrl] : undefined;
                if (methodByConfig) {
                    return !!Object.values(methodByConfig).find((config) => {
                        return config.name === 'Login Redirect';
                    });
                }
                return false;
            });
            if (sourceRedirectUrl === undefined) {
                res.end('INVALID_URL');
                return;
            }
            redirectByAuth(req, res, sourceRedirectUrl);
        }
        else if (req.url.includes('/logout')) {
            const set = proxyRes.headers['set-cookie'];
            if (set) {
                const result = set.map((cookie) => cookie.replace(new RegExp('Domain=[\\S^;]*', 'g'), 'Domain=localhost;'));
                proxyRes.headers['set-cookie'] = result;
            }
        }
    }
    else if (req.url.startsWith('/accounts') && req.url.includes('/signin')) {
        const set = proxyRes.headers['set-cookie'];
        set
            ? set.push('IAM_TEST_COOKIE=IAM_TEST_COOKIE; Domain=localhost; Path=/')
            : ['IAM_TEST_COOKIE=IAM_TEST_COOKIE; Domain=localhost; Path=/'];
        proxyRes.headers['set-cookie'] = set;
    }
};
function spinUpMaster(listenPort, otherServerDetails) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const projectDetails = {
            id: (0, project_2.getProjectId)(),
            domain_prefix: (0, project_2.getDomainPrefix)(),
            domain: constants_1.ORIGIN.app.replace('https://', ''),
            key: (0, project_2.getDomainKey)(),
            env_name: (0, project_2.getEnvName)()
        };
        const rules = runtime_store_1.default.get('context.apig.local.config', -1);
        const customProxyUrl = (0, option_1.getOptionValue)('proxy');
        const app = (0, express_1.default)();
        let systemRoutes;
        const nonApigURL = ['/accounts', '/clientoauth', '/_wms', '/wmssrv'];
        app.use((0, logger_1.default)((_a = otherServerDetails.appSail) === null || _a === void 0 ? void 0 : _a.at(0)));
        app.use(cookie_parser_1.default);
        app.use((0, project_1.default)(projectDetails));
        app.use(authenticator_1.default);
        app.use(nonApigURL, (req, res) => {
            req.url = req.originalUrl;
            (0, unknownReqProxy_1.default)(proxy, customProxyUrl)(req, res);
        });
        app.use('*/.catalyst%2Freload-script.js', (req, res) => {
            var _a;
            req.url = '/.catalyst%2Freload-script.js';
            (_a = otherServerDetails.client) === null || _a === void 0 ? void 0 : _a.forEach((clientDetails) => {
                const appTarget = `http://127.0.0.1:${clientDetails.httpPort}/app/`;
                proxy.web(req, res, {
                    target: appTarget,
                    changeOrigin: true
                });
            });
        });
        if (rules !== -1) {
            for (const [sourceURL, methodByConfig] of Object.entries(rules)) {
                const router = app.route(sourceURL);
                for (const [method, config] of Object.entries(methodByConfig)) {
                    if (config.system) {
                        if (systemRoutes === undefined) {
                            systemRoutes = {};
                        }
                        js_1.JS.set(systemRoutes, [sourceURL, method], config);
                    }
                    router[method]((req, res, next) => {
                        if (res.locals.apigRules === undefined) {
                            res.locals.apigRules = [];
                        }
                        res.locals.apigRules.push(Object.assign({ source_endpoint: sourceURL, params: req.params }, config));
                        next();
                    });
                }
            }
            app.use('/', apig_matcher_1.default, auth_checker_1.default, url_rewriter_1.default);
        }
        const proxy = (0, http_proxy_1.createProxyServer)({
            hostRewrite: `localhost:${listenPort}`,
            protocolRewrite: 'http'
        })
            .on('error', (err, req, res) => {
            if (res.writableEnded) {
                return;
            }
            if (res instanceof http_1.ServerResponse) {
                res.writeHead(502, { 'Content-Type': 'json' });
            }
            res.end(JSON.stringify({ error: 'unable to serve the request' }));
            console.log();
            console.log('Unable to reach the servers to serve the request:  ', req.url);
            console.error(err);
        })
            .on('econnreset', (err, req, res, targetUrl) => {
            if (res.writableEnded) {
                return;
            }
            if (res instanceof http_1.ServerResponse) {
                res.writeHead(502, { 'Content-Type': 'json' });
            }
            res.end(JSON.stringify({ error: 'unable to serve the request. ECONNRESET.' }));
            console.log();
            console.log('Connection reset while trying to serve the request ', req.url);
            (0, logger_2.debug)('Connection reset from target URL : ', targetUrl);
            console.error(err);
        })
            .on('proxyRes', proxyResponseHandler(systemRoutes))
            .on('close', () => (0, logger_2.debug)('proxy closed'));
        const proxyDestroyer = new server_js_1.ConnectionDestroyer(proxy);
        Object.keys(otherServerDetails).forEach((targ) => {
            var _a, _b, _c, _d;
            switch (targ) {
                case 'client': {
                    (_a = otherServerDetails.client) === null || _a === void 0 ? void 0 : _a.forEach((clientDetails) => {
                        const appTarget = `http://127.0.0.1:${clientDetails.httpPort}/app/`;
                        app.use('/app', (req, res) => {
                            const target = clientDetails.target;
                            if (req.url === '/' && target.homepage.includes('/__catalyst')) {
                                req.url = target.homepage;
                                (0, unknownReqProxy_1.default)(proxy, customProxyUrl)(req, res);
                            }
                            else if (req.url.startsWith('/local-redirect') && target.login_redirect) {
                                const isUrl = target.login_redirect.startsWith('/');
                                if (isUrl) {
                                    res.redirect(target.login_redirect);
                                }
                                else {
                                    res.redirect('/app/' + target.login_redirect);
                                }
                            }
                            else {
                                proxy.web(req, res, {
                                    target: appTarget,
                                    changeOrigin: true
                                });
                            }
                        });
                        const appTargetUrl = new URL(appTarget);
                        appTargetUrl.pathname = '';
                        appTargetUrl.protocol = 'ws';
                        app.addListener('upgrade', (...upgradeParam) => {
                            proxy.ws(upgradeParam[0], upgradeParam[1], upgradeParam[2], {
                                target: appTargetUrl.href,
                                ws: true,
                                changeOrigin: true
                            });
                        });
                    });
                    break;
                }
                case 'server': {
                    (_b = otherServerDetails.server) === null || _b === void 0 ? void 0 : _b.forEach((serverDetail) => {
                        var _a;
                        app.use('/server/' + ((_a = serverDetail.target) === null || _a === void 0 ? void 0 : _a.name), (req, res) => {
                            proxy.web(req, res, {
                                target: `http://127.0.0.1:${serverDetail.httpPort}`
                            });
                        });
                    });
                    break;
                }
                case 'functions': {
                    (_c = otherServerDetails.functions) === null || _c === void 0 ? void 0 : _c.forEach((fnDetails) => {
                        const fnTarget = fnDetails.target;
                        app.use(`/server/${fnTarget.name}`, (req, res) => {
                            proxy.web(req, res, {
                                target: `http://127.0.0.1:${fnDetails.httpPort}${fnTarget.type === constants_1.FN_TYPE.basic
                                    ? `/server/${fnTarget.name}/execute`
                                    : ''}`,
                                ws: true
                            });
                        });
                        app.use(`/baas/v1/project/:projectId/function/${fnTarget.name}`, (req, res) => {
                            proxy.web(req, res, {
                                target: `http://127.0.0.1:${fnDetails.httpPort}${fnTarget.type === constants_1.FN_TYPE.basic
                                    ? `/server/${fnTarget.name}/execute`
                                    : ''}`,
                                ws: true
                            });
                        });
                        if (fnTarget.id) {
                            app.use(`/server/${fnTarget.id}`, (req, res) => {
                                proxy.web(req, res, {
                                    target: `http://127.0.0.1:${fnDetails.httpPort}${fnTarget.type === constants_1.FN_TYPE.basic
                                        ? `/server/${fnTarget.id}/execute`
                                        : ''}`,
                                    ws: true
                                });
                            });
                            app.use(`/baas/v1/project/:projectId/function/${fnTarget.id}`, (req, res) => {
                                proxy.web(req, res, {
                                    target: `http://127.0.0.1:${fnDetails.httpPort}${fnTarget.type === constants_1.FN_TYPE.basic
                                        ? `/server/${fnTarget.id}/execute`
                                        : ''}`,
                                    ws: true
                                });
                            });
                        }
                    });
                    break;
                }
                case 'appSail': {
                    (_d = otherServerDetails.appSail) === null || _d === void 0 ? void 0 : _d.forEach((appSailDetails) => {
                        app.use('/', (req, res) => {
                            var _a;
                            if ((_a = req.url) === null || _a === void 0 ? void 0 : _a.includes('/__catalyst/sdk/init.js')) {
                                (0, unknownReqProxy_1.default)(proxy, customProxyUrl)(req, res);
                            }
                            else {
                                proxy.web(req, res, {
                                    target: `http://127.0.0.1:${appSailDetails.target.port
                                        .appsail}`,
                                    ws: true
                                });
                            }
                        });
                    });
                    break;
                }
                default:
                    throw new error_1.default('Unknown type provided to master server ' + targ, {
                        exit: 2
                    });
            }
        });
        app.use('/', (0, unknownReqProxy_1.default)(proxy, customProxyUrl));
        app.use(error_handler_1.default);
        const expressServer = app.listen(listenPort, '127.0.0.1').on('error', (err) => {
            if (proxy) {
                proxyDestroyer.destroy();
            }
            console.error(err);
        });
        const expressDestroyer = new server_js_1.ConnectionDestroyer(expressServer);
        expressServer.maxConnections = 100;
        process.on('SIGINT', () => expressDestroyer.destroy(false));
        expressServer.on('close', () => __awaiter(this, void 0, void 0, function* () {
            yield proxyDestroyer.destroy().catch((err) => (0, logger_2.debug)(err));
        }));
        expressServer.on('upgrade', (...upgradeParam) => {
            app.emit('upgrade', ...upgradeParam);
        });
        return expressServer;
    });
}
exports.default = spinUpMaster;
