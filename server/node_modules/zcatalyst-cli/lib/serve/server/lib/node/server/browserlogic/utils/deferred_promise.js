/**
 * DeferredPromise shares the same api like normal promise. But it has additional control for 
 * reject and resolve from remote. It is basically a wrapper over normal promise.
 */
export default class DeferredPromise {
    constructor() {
        this._inner = new Promise((RESOLVE, REJECT) => {
            this.resolve = RESOLVE;
            this.reject = REJECT;
        });

        // Propagating api to inner promise.
        this.then = this._inner.then.bind(this._inner);
        this.catch = this._inner.catch.bind(this._inner);
    }

    // refer: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag
    get [Symbol.toStringTag]() {
        return 'Promise';
    }
};
