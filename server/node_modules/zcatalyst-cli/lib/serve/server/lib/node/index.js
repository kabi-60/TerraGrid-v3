"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ansi_colors_1 = require("ansi-colors");
const path_1 = require("path");
const stream_1 = require("stream");
const error_1 = __importDefault(require("../../../../error"));
const plugin_loader_1 = __importDefault(require("../../../../plugin-loader"));
const runtime_store_1 = __importDefault(require("../../../../runtime-store"));
const constants_1 = require("../../../../util_modules/constants");
const logger_1 = require("../../../../util_modules/logger");
const project_1 = require("../../../../util_modules/project");
const shell_1 = require("../../../../util_modules/shell");
exports.default = (details, masterPort) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d, _e, _f;
    const label = `${details.type}[${(_a = details.target) === null || _a === void 0 ? void 0 : _a.name}]`;
    const _g = details.target, { ['watcher']: _ } = _g, serialisableTarget = __rest(_g, ['watcher']);
    const projectRoot = runtime_store_1.default.get('project.root');
    serialisableTarget.index = serialisableTarget.index
        ? serialisableTarget.index.replace(projectRoot, (0, path_1.join)(projectRoot, constants_1.FOLDERNAME.build))
        : undefined;
    const opts = [
        (0, path_1.join)(__dirname, 'server'),
        details.httpPort + '',
        JSON.stringify({
            index: ((_b = details.target) === null || _b === void 0 ? void 0 : _b.index)
                ? details.target.index.replace(projectRoot, (0, path_1.join)(projectRoot, constants_1.FOLDERNAME.build))
                : undefined,
            name: (_c = details.target) === null || _c === void 0 ? void 0 : _c.name,
            type: (_d = details.target) === null || _d === void 0 ? void 0 : _d.type,
            source: (_e = details.target) === null || _e === void 0 ? void 0 : _e.source
        })
    ];
    if (details.debugPort !== -1) {
        (0, logger_1.labeled)(label, 'you can attach your debugger at port : ' + details.debugPort).MESSAGE();
        opts.unshift('--inspect=' + details.debugPort);
    }
    const targetSource = (_f = details.target) === null || _f === void 0 ? void 0 : _f.source;
    const servePlugin = yield (0, plugin_loader_1.default)('functions', 'start', targetSource).catch((err) => (0, logger_1.debug)(err));
    if (typeof servePlugin === 'function') {
        const logStreamPlugin = yield (0, plugin_loader_1.default)('functions', 'logs', targetSource).catch((err) => (0, logger_1.debug)(err));
        if (typeof logStreamPlugin === 'function') {
            const stream = yield logStreamPlugin();
            if (stream instanceof stream_1.Stream) {
                const streamLogFn = (chunk) => (0, logger_1.log)('info', chunk.toString(), true);
                stream.on('data', streamLogFn);
            }
        }
        const event = servePlugin(details, masterPort).catch((e) => {
            var _a;
            const err = error_1.default.getErrorInstance(e, {
                fileName: __filename,
                skipHelp: false
            });
            err.errorId = 'SERVE-IDX-1';
            err.arg = [
                'functions',
                (0, ansi_colors_1.bold)(((_a = details.target.plugins) === null || _a === void 0 ? void 0 : _a.start)[targetSource] || 'start'),
                (0, ansi_colors_1.bold)('Error: ') + ansi_colors_1.italic.red(err.message)
            ];
            throw err;
        });
        (0, logger_1.labeled)(label, `Plugin : "${runtime_store_1.default.get(`context.functions.plugins.start${targetSource ? '.' + targetSource : ''}`)}" is used for ${details.type} serve`).MESSAGE();
        return event;
    }
    return (0, shell_1.spawn)('node', opts, {
        cwd: targetSource === null || targetSource === void 0 ? void 0 : targetSource.replace(projectRoot, (0, path_1.join)(projectRoot, constants_1.FOLDERNAME.build)),
        stdio: 'pipe',
        env: Object.assign({ NODE_PATH: targetSource + path_1.sep + 'node_modules', X_ZOHO_CATALYST_IS_LOCAL: 'true', X_ZOHO_CATALYST_FUNCTION_LOADED: 'true', X_ZOHO_CATALYST_ACCOUNTS_URL: constants_1.ORIGIN.auth, X_ZOHO_CATALYST_CONSOLE_URL: constants_1.ORIGIN.admin, CATALYST_PROJECT_TIMEZONE: (0, project_1.getProjectTimezone)(Intl.DateTimeFormat().resolvedOptions().timeZone) }, details.target.env_var)
    }).RAW();
});
