'use strict';

import { createServer } from 'http';
import { inspect } from 'util';
import { pathToFileURL } from 'url';

const args = process.argv.slice(2);
const listenPort = parseInt(args[0], 10);
const fnDetails = JSON.parse(args[1]);

const targetName = fnDetails.name;
const index = pathToFileURL(fnDetails.index);
const type = fnDetails.type;

const aioHandler = async (req, res) => {
	try {
		if (index === undefined) {
			throw new Error(`index of ${type} function is undefined`);
		}
		const userModule = await import(index);
		if (type !== 'aio') {
			throw new Error('Invalid URL pattern for the functions type: ' + type);
		}
		if (!('default' in userModule)) {
			throw new Error('Could not find any default export');
		}
		if (typeof userModule.default !== 'function') {
			throw new Error('The default export is not a function');
		}
		await userModule.default(req, res);
	} catch (e) {
		const errorString = inspect(e);
		// eslint-disable-next-line no-console
		console.error('[' + targetName + '] ' + errorString);
		res.writeHead(500);
		res.end(errorString);
	}
};

const browserLogicHandler = async (req, res) => {
	try {
		if (index === undefined) {
			throw new Error(`index of ${type} function is undefined`);
		}
		if (type !== 'browserlogic') {
			throw new Error('Invalid URL pattern for the functions type: ' + type);
		}
		const userModule = await import(index);
		const browserLogic = await import('./browserlogic/index.js');
		const browserModule = await browserLogic.default(userModule);
		const fnParams = await browserModule.constructFunctionParameters(
			req,
			res,
			fnDetails.source
		);
		try {
			await browserModule.logic(...fnParams);
		} catch (err) {
			browserModule.close(...fnParams);
		}
	} catch (er) {
		const errorString = inspect(er);
		// eslint-disable-next-line no-console
		console.error('[' + targetName + '] ' + errorString);
		res.writeHead(500);
		res.end(errorString);
	}
};

const server = createServer(type === 'browserlogic' ? browserLogicHandler : aioHandler);

server.listen(listenPort, '127.0.0.1').on('error', (err) => {
	// eslint-disable-next-line no-console
	console.error(err);
});
