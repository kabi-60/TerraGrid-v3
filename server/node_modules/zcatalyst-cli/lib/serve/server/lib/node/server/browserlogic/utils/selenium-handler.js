import DEFERED_PROMISE from './deferred_promise.js';
import { createRequire } from 'module';
const require = createRequire(import.meta.url);

const webdriver = require('selenium-webdriver');
const chrome = require('selenium-webdriver/chrome');

/**
 * @author eraianbu-5628
 * 
 */

let driver;
let browserlaunching = false;
let browserPromise = new DEFERED_PROMISE();

async function getBrowser() {
    if ((!driver || !isConnected()) && !browserlaunching) {
        browserPromise = new DEFERED_PROMISE();
        browserlaunching = true;

        var options = new chrome.Options();
        options.addArguments("--no-sandbox");
        options.addArguments('--headless') ;
        options.addArguments('--disable-dev-shm-usage');
        options.addArguments('--remote-debugging-port=9002');
        
        const chromeCapabilities = webdriver.Capabilities.chrome();
        driver = new webdriver.Builder()
            .forBrowser(webdriver.Browser.CHROME) 
            .setChromeOptions(options)
            .withCapabilities(chromeCapabilities)
            .build();

        let version =  (await driver.getCapabilities()).get('browserVersion');
        await driver.getTitle();
        console.log("Chrome started successfully " + version);
        browserPromise.resolve()
        browserlaunching = false;
    }
    return browserPromise.then(async () => {
        return driver;
    })
}

function isConnected()
{
    try
    {
        driver.getTitle();
        return true;
    }
    catch{
        driver = undefined;
    }
    return false;
}

export default {getBrowser}
