#!/usr/bin/env node
/* eslint-disable @typescript-eslint/no-var-requires */
const EXEC_SYNC = require('child_process').execSync;

const WAR = 'war';
const JAVASE = 'javase';
const NODEJS = 'nodejs';
const PYTHON = 'python';

const JAVASE_DEFAULT = 'java Main';
const NODEJS_DEFAULT = 'node main.js';
const PYTHON_DEFAULT = 'python main.py';

function parseCmdArg() {
	const args = {};

	for (let i = 0; i < process.argv.length; i++) {
		switch (process.argv[i]) {
			case '-t':
			case '--type':
				args.rtType = process.argv[i + 1];
				break;
			case '-c':
			case '--command':
				args.command = process.argv.slice(i + 1);
				break;
			default:
				break;
		}
	}

	return args;
}

function main() {
	const CMD_ARGS = parseCmdArg();

	let command = '';
	let cwd = process.cwd();
	switch (CMD_ARGS.rtType) {
		case WAR:
			if (!CMD_ARGS.command) {
				throw new Error(`command not found`);
			}
			command = CMD_ARGS.command;
			cwd = process.env.JETTY_BASE;
			break;
		case JAVASE:
			command = CMD_ARGS.command || JAVASE_DEFAULT;
			break;
		case NODEJS:
			command = CMD_ARGS.command || NODEJS_DEFAULT;
			break;
		case PYTHON:
			command = CMD_ARGS.command || PYTHON_DEFAULT;
			break;
		default:
			throw new Error(`invalid runtime type: ${CMD_ARGS.rtType}`);
	}

	EXEC_SYNC(command.toString(), { stdio: 'inherit', cwd });
}

main();
