"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const appsail_utils_1 = require("../../appsail-utils");
const error_1 = __importDefault(require("../../error"));
const port_resolver_1 = __importDefault(require("../../port-resolver"));
const runtime_store_1 = __importDefault(require("../../runtime-store"));
const config_1 = require("../../util_modules/config");
const logger_1 = require("../../util_modules/logger");
exports.default = () => __awaiter(void 0, void 0, void 0, function* () {
    const allTargets = yield config_1.appSailConfig.getAllTargetDetails();
    const optionTargets = (0, appsail_utils_1.filterTargets)(allTargets || []);
    if (optionTargets.length === 0) {
        (0, logger_1.debug)('AppSail targets are empty');
        return;
    }
    const validated = (0, appsail_utils_1.validateAppSail)(optionTargets);
    const filledTargets = yield Promise.all(validated.map((targ) => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        if (!targ.validity.valid) {
            return targ;
        }
        const proxyPort = yield port_resolver_1.default.getPort('appsail', 'http', {
            name: ((_a = targ.appSail) === null || _a === void 0 ? void 0 : _a.name) + '_proxy',
            searchSpan: 10,
            server: 'master'
        }).catch((err) => {
            throw new error_1.default('No free ports between 3000 and 3010. AppSail needs the ports within this range to function properly', { original: err });
        });
        const appsailPort = yield port_resolver_1.default.getPort('appsail', 'http', {
            name: ((_b = targ.appSail) === null || _b === void 0 ? void 0 : _b.name) + '_proxy',
            server: 'service'
        });
        return Object.assign(Object.assign({}, targ), { port: { appsail: appsailPort, proxy: proxyPort } });
    })));
    runtime_store_1.default.set('context.appsail.targets', filledTargets);
});
