'use strict';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ansi_colors_1 = require("ansi-colors");
const path_1 = require("path");
const client_utils_1 = require("../client-utils");
const error_1 = __importDefault(require("../error"));
const fn_utils_1 = require("../fn-utils");
const fn_watcher_1 = __importDefault(require("../fn-watcher"));
const port_resolver_1 = __importDefault(require("../port-resolver"));
const runtime_store_1 = __importDefault(require("../runtime-store"));
const http_functions_1 = __importDefault(require("../shell/dependencies/http-functions"));
const constants_1 = require("../util_modules/constants");
const runtime_1 = __importDefault(require("../util_modules/constants/lib/runtime"));
const fs_1 = require("../util_modules/fs");
const logger_1 = require("../util_modules/logger");
const option_1 = require("../util_modules/option");
const features = __importStar(require("./features"));
const server_1 = __importDefault(require("./server"));
exports.default = () => __awaiter(void 0, void 0, void 0, function* () {
    const serveTargets = runtime_store_1.default.get('context.targets', []);
    const advancedServer = new server_1.default();
    const basicFnServer = new http_functions_1.default({ primary: false });
    const projectRoot = runtime_store_1.default.get('project.root');
    const buildFolder = (0, path_1.join)(projectRoot, constants_1.FOLDERNAME.build);
    if (yield fs_1.ASYNC.isPathExists(buildFolder)) {
        try {
            (0, logger_1.debug)('Build folder already exists, starting cleanup');
            yield fs_1.ASYNC.deleteDir(buildFolder);
        }
        catch (err) {
            throw new error_1.default('Error running pre cleanup', {
                original: err,
                exit: 1,
                errorId: 'SERVE-2',
                arg: [(0, ansi_colors_1.bold)(constants_1.FOLDERNAME.build), ansi_colors_1.italic.red(buildFolder)]
            });
        }
    }
    try {
        const masterPort = yield port_resolver_1.default.getPort('master', 'http', {
            name: 'master',
            duplicateCheck: false,
            searchSpan: 10
        });
        runtime_store_1.default.set('context.port.http.master', masterPort);
        yield Promise.all(serveTargets.map((target) => features[target]()));
        const rawTargets = runtime_store_1.default.get('context.functions.targets', []);
        const watchOpt = (0, option_1.getOptionValue)('watch', false);
        if (watchOpt) {
            yield Promise.all(rawTargets.map((target) => __awaiter(void 0, void 0, void 0, function* () { return (target.valid ? (0, fn_watcher_1.default)(target) : undefined); })));
        }
        const functionTargets = rawTargets.filter((target) => {
            var _a;
            if (!target.valid) {
                (0, logger_1.warning)('skipping serve of function [' +
                    target.name +
                    '] since ' +
                    target.failure_reason);
                return false;
            }
            if (target.type === constants_1.FN_TYPE.advanced) {
                advancedServer.add('server', target);
            }
            else if (target.type === constants_1.FN_TYPE.browserLogic) {
                advancedServer.add('functions', target);
            }
            else if (target.type === constants_1.FN_TYPE.basic &&
                ((_a = target.stack) === null || _a === void 0 ? void 0 : _a.startsWith(runtime_1.default.language.python.value))) {
                advancedServer.add('functions', target);
            }
            return target.valid;
        });
        if (serveTargets.includes('appsail')) {
            const appSail = runtime_store_1.default.get('context.appsail.targets', []);
            const validAppSail = appSail.filter((sail) => {
                var _a;
                if (!sail.validity.valid) {
                    (0, logger_1.warning)('skipping serve of AppSail service [' +
                        ((_a = sail.appSail) === null || _a === void 0 ? void 0 : _a.name) +
                        '] since ' +
                        sail.validity.reason);
                    return false;
                }
                advancedServer.add('appsail', sail);
                return true;
            });
            if (validAppSail.length === 0) {
                (0, logger_1.labeled)('AppSail', 'No targets are ready to be served in local').WARN();
                serveTargets.splice(serveTargets.indexOf('appsail'), 1);
                runtime_store_1.default.set('context.targets', serveTargets);
            }
        }
        if (serveTargets.includes('client')) {
            const client = runtime_store_1.default.get('context.client', false);
            if (client && client.valid) {
                client.opts = {
                    open: (0, option_1.getOptionValue)('open', false),
                    watch: watchOpt
                };
                advancedServer.add('client', client);
            }
            else {
                serveTargets.splice(serveTargets.indexOf('client'), 1);
            }
        }
        const isFunctionsServed = serveTargets.includes('functions');
        if (isFunctionsServed && functionTargets.length === 0) {
            (0, logger_1.labeled)('functions', 'No targets are ready to be served in local').WARN();
            serveTargets.splice(serveTargets.indexOf('functions'), 1);
            runtime_store_1.default.set('context.targets', serveTargets);
        }
        if (isFunctionsServed) {
            runtime_store_1.default.set('context.functions.targets', functionTargets);
        }
        if (serveTargets.length === 0 ||
            (serveTargets.length === 1 && serveTargets[0] === 'apig')) {
            throw new error_1.default('No components to serve', { exit: 0, errorId: 'SERVE-1' });
        }
        const basicFn = functionTargets.find((target) => {
            var _a;
            return target.type === constants_1.FN_TYPE.basic &&
                !((_a = target.stack) === null || _a === void 0 ? void 0 : _a.startsWith(runtime_1.default.language.python.value));
        });
        if (basicFn) {
            yield basicFnServer.start();
        }
        yield advancedServer.start();
        yield advancedServer.wait();
        (0, logger_1.info)('Shutting down server');
        yield Promise.all([
            fs_1.ASYNC.deleteDir(buildFolder).catch((err) => (0, logger_1.debug)('Error while deleting directory ', err)),
            advancedServer ? advancedServer.stop() : undefined,
            basicFnServer ? basicFnServer.stop() : undefined
        ]);
        if (serveTargets.includes('functions')) {
            fn_utils_1.fnUtils.common.executeHook({
                prefix: 'post',
                command: 'serve'
            });
        }
        if (serveTargets.includes('client')) {
            client_utils_1.clientUtils.executeHook({
                prefix: 'post',
                command: 'serve'
            });
        }
        (0, logger_1.info)();
        (0, logger_1.success)('Shutdown complete');
    }
    catch (e) {
        (0, logger_1.debug)('Error serving the resources: ', e);
        yield Promise.all([
            fs_1.ASYNC.deleteDir(buildFolder).catch(),
            advancedServer ? advancedServer.stop() : undefined,
            basicFnServer ? basicFnServer.stop() : undefined
        ]);
        throw e;
    }
});
