'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const error_1 = __importDefault(require("../error"));
const runtime_store_1 = __importDefault(require("../runtime-store"));
const logger_1 = require("../util_modules/logger");
const features_1 = __importDefault(require("./features"));
function deploy(feature) {
    return __awaiter(this, void 0, void 0, function* () {
        const deployTargets = runtime_store_1.default.get('context.targets', feature ? [feature] : []);
        if (deployTargets.length === 0) {
            return;
        }
        const currentTarget = deployTargets.shift();
        if (currentTarget === undefined) {
            return deploy();
        }
        const featureModule = features_1.default[currentTarget];
        runtime_store_1.default.set('context.current.target', currentTarget);
        try {
            runtime_store_1.default.set('payload.targets', runtime_store_1.default.get('payload.targets', []).concat(currentTarget));
            yield featureModule(feature ? true : false);
        }
        catch (e) {
            const error = error_1.default.getErrorInstance(e);
            (0, logger_1.debug)(`${currentTarget} deploy unsuccessful, reason : ${error.stack}`);
            (0, logger_1.labeled)(currentTarget, error.message).WARN();
        }
        return deploy();
    });
}
exports.default = deploy;
