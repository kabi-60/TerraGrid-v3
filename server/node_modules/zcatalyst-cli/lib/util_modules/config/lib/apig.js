'use strict';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.source = exports.script = exports.enabled = exports.rules = exports.raw = void 0;
const error_1 = __importDefault(require("../../../error"));
const runtime_store_1 = __importDefault(require("../../../runtime-store"));
const constants_1 = require("../../constants");
function raw(throwError = false) {
    const config = runtime_store_1.default.get('config', null);
    if (config === null) {
        if (throwError) {
            throw new error_1.default(constants_1.FILENAME.config + ' file is required', { exit: 2 });
        }
        return;
    }
    return config.get('apig');
}
exports.raw = raw;
function rules() {
    const apigConfig = raw();
    return (apigConfig && apigConfig.rules) || constants_1.FILENAME.apig.user_rules;
}
exports.rules = rules;
function enabled(fallback) {
    const apigConfig = raw();
    return (apigConfig && apigConfig.enabled) || fallback || false;
}
exports.enabled = enabled;
function script(name, fallback) {
    const apigConfig = raw();
    const rawScripts = apigConfig && (apigConfig === null || apigConfig === void 0 ? void 0 : apigConfig.scripts);
    if (rawScripts === undefined && fallback === undefined) {
        throw new error_1.default('Scripts not found', { exit: 2 });
    }
    if (name === undefined) {
        return rawScripts || fallback;
    }
    if (rawScripts && rawScripts[name] === undefined && fallback === undefined) {
        throw new error_1.default('Scripts not found', { exit: 2 });
    }
    return (rawScripts && rawScripts[name]) || fallback;
}
exports.script = script;
exports.source = rules;
