'use strict';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.script = exports.ignore = exports.plugin = exports.source = exports.raw = void 0;
const path_1 = require("path");
const error_js_1 = __importDefault(require("../../../error.js"));
const runtime_store_js_1 = __importDefault(require("../../../runtime-store.js"));
const file_names_js_1 = __importDefault(require("../../constants/lib/file-names.js"));
const folder_names_js_1 = __importDefault(require("../../constants/lib/folder-names.js"));
const js_js_1 = require("../../js.js");
function raw(throwError = false) {
    const config = runtime_store_js_1.default.get('config', null);
    if (config === null) {
        if (throwError) {
            throw new error_js_1.default(file_names_js_1.default.config + ' file is required', { exit: 2 });
        }
        return;
    }
    return config.get('client');
}
exports.raw = raw;
function source() {
    const clientConfig = raw();
    return (clientConfig && clientConfig.source) || folder_names_js_1.default.client;
}
exports.source = source;
function plugin(name) {
    const clientConfig = raw();
    const rawPlugins = clientConfig && clientConfig.plugin;
    if (!rawPlugins) {
        return;
    }
    if (typeof rawPlugins === 'string') {
        if (name === undefined) {
            return {
                validate: rawPlugins,
                start: rawPlugins,
                build: rawPlugins
            };
        }
        return rawPlugins;
    }
    if (name === undefined) {
        return rawPlugins;
    }
    return rawPlugins[name];
}
exports.plugin = plugin;
function ignore(sourcePath) {
    const clientConfig = raw();
    const ignoreArr = (clientConfig && clientConfig.ignore) || [];
    return ignoreArr.map((value) => {
        if (js_js_1.JS.indexOf(value, path_1.sep) === js_js_1.JS.size(value) - 1) {
            return '**' + path_1.sep + js_js_1.JS.initial(value).join('');
        }
        else {
            if (js_js_1.JS.startsWith(value, path_1.sep)) {
                return js_js_1.JS.endsWith(value, path_1.sep)
                    ? sourcePath + js_js_1.JS.initial(value).join('')
                    : sourcePath + value;
            }
            return js_js_1.JS.endsWith(value, path_1.sep)
                ? sourcePath + path_1.sep + js_js_1.JS.initial(value).join('')
                : sourcePath + path_1.sep + value;
        }
    });
}
exports.ignore = ignore;
function script(name, fallback) {
    const clientConfig = raw();
    const rawScripts = clientConfig && (clientConfig === null || clientConfig === void 0 ? void 0 : clientConfig.scripts);
    if (rawScripts === undefined && fallback === undefined) {
        throw new error_js_1.default('Scripts not found', { exit: 2 });
    }
    if (name === undefined) {
        return rawScripts || fallback;
    }
    if (rawScripts && rawScripts[name] === undefined && fallback === undefined) {
        throw new error_js_1.default('Scripts not found', { exit: 2 });
    }
    return (rawScripts && rawScripts[name]) || fallback;
}
exports.script = script;
