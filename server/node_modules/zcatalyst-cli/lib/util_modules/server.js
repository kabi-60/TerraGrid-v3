"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectionDestroyer = void 0;
const http_proxy_1 = __importDefault(require("http-proxy"));
class ConnectionDestroyer {
    constructor(server) {
        this.server = server;
        this.connections = new Set();
        if (this.server instanceof http_proxy_1.default) {
            this.server.on('proxyReq', (req) => {
                req.on('close', () => this.connections.delete(req));
                this.connections.add(req);
            });
        }
        else {
            this.server.on('connection', (sock) => {
                sock.on('close', () => this.connections.delete(sock));
                this.connections.add(sock);
            });
        }
    }
    destroy(terminate = true, err) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.connections.forEach((sock) => {
                    sock.destroy(err);
                });
                if (terminate) {
                    if (this.server instanceof http_proxy_1.default) {
                        return this.server.close(() => resolve());
                    }
                    else {
                        return (this.server.listening &&
                            this.server.close((err) => (err instanceof Error ? reject(err) : resolve())));
                    }
                }
                resolve();
            });
        });
    }
}
exports.ConnectionDestroyer = ConnectionDestroyer;
