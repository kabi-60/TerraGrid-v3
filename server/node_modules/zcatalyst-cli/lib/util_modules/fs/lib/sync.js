'use strict';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeJSONFile = exports.readJSONFile = exports.emptyDir = exports.copyDir = exports.copyFiles = exports.copyFile = exports.deleteTempDir = exports.tempFile = exports.deleteDir = exports.isPathInside = exports.isPathOutside = exports.renameFile = exports.modifyFileName = exports.appendFile = exports.writeFile = exports.ensureFile = exports.ensureDir = exports.readFile = exports.deleteFile = exports.getAllFiles = exports.getAllDirs = exports.dirExists = exports.fileExists = exports.readSymLink = exports.getReadStream = exports.getWriteStream = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
function getWriteStream(pth, mode) {
    return fs_extra_1.default.createWriteStream(pth, { mode });
}
exports.getWriteStream = getWriteStream;
function getReadStream(pth) {
    return fs_extra_1.default.createReadStream(pth);
}
exports.getReadStream = getReadStream;
function readSymLink(pth) {
    return fs_extra_1.default.readlinkSync(pth);
}
exports.readSymLink = readSymLink;
function fileExists(pth) {
    try {
        const stats = fs_extra_1.default.statSync(pth);
        return stats.isFile();
    }
    catch (e) {
        return false;
    }
}
exports.fileExists = fileExists;
function dirExists(pth) {
    try {
        const stats = fs_extra_1.default.statSync(pth);
        return stats.isDirectory();
    }
    catch (e) {
        return false;
    }
}
exports.dirExists = dirExists;
function getAllDirs(srcPath) {
    const directories = fs_extra_1.default
        .readdirSync(srcPath)
        .map((name) => {
        return path_1.default.join(srcPath, name);
    })
        .filter((source) => {
        return fs_extra_1.default.lstatSync(source).isDirectory();
    });
    return directories;
}
exports.getAllDirs = getAllDirs;
function getAllFiles(srcPath) {
    const files = fs_extra_1.default
        .readdirSync(srcPath)
        .map((name) => {
        return path_1.default.join(srcPath, name);
    })
        .filter((source) => {
        return fs_extra_1.default.lstatSync(source).isFile();
    });
    return files;
}
exports.getAllFiles = getAllFiles;
function deleteFile(pth) {
    return fs_extra_1.default.removeSync(pth);
}
exports.deleteFile = deleteFile;
function readFile(pth, encoding = 'utf8') {
    if (fileExists(pth)) {
        return fs_extra_1.default.readFileSync(pth, encoding);
    }
    return undefined;
}
exports.readFile = readFile;
function ensureDir(dir) {
    return fs_extra_1.default.ensureDirSync(dir);
}
exports.ensureDir = ensureDir;
function ensureFile(filePath, cleanFile = false) {
    const isFile = fileExists(filePath);
    if (!isFile) {
        return fs_extra_1.default.ensureFileSync(filePath);
    }
    if (cleanFile) {
        return fs_extra_1.default.truncateSync(filePath);
    }
    return;
}
exports.ensureFile = ensureFile;
function writeFile(pth, data, encoding = 'utf8') {
    return fs_extra_1.default.writeFileSync(pth, data, { encoding });
}
exports.writeFile = writeFile;
function appendFile(pth, data, encoding = 'utf8') {
    return fs_extra_1.default.appendFileSync(pth, data, { encoding });
}
exports.appendFile = appendFile;
function modifyFileName(pth, modifier) {
    pth = Array.isArray(pth) ? pth : [pth];
    return pth.map((el) => {
        const ext = path_1.default.extname(el);
        return path_1.default.join(path_1.default.dirname(el), modifier(path_1.default.basename(el, ext), ext));
    });
}
exports.modifyFileName = modifyFileName;
function renameFile(pth, modifier) {
    pth = Array.isArray(pth) ? pth : [pth];
    return pth.map((el) => fs_extra_1.default.renameSync(el, modifyFileName(el, modifier)[0]));
}
exports.renameFile = renameFile;
function isPathOutside(from, to) {
    return !isPathInside(from, to);
}
exports.isPathOutside = isPathOutside;
function isPathInside(from, to) {
    const relative = path_1.default.relative(from, to);
    return !!((from === to || relative) &&
        !relative.startsWith('..') &&
        !path_1.default.isAbsolute(relative));
}
exports.isPathInside = isPathInside;
function deleteDir(dir) {
    return fs_extra_1.default.removeSync(dir);
}
exports.deleteDir = deleteDir;
function tempFile(name = Date.now().toString()) {
    const tempDir = path_1.default.join(os_1.default.tmpdir(), '.catalyst');
    const tempFilePth = path_1.default.join(tempDir, name);
    fs_extra_1.default.ensureFileSync(tempFilePth);
    return tempFilePth;
}
exports.tempFile = tempFile;
function deleteTempDir() {
    const dir = path_1.default.join(os_1.default.tmpdir(), '.catalyst');
    return deleteDir(dir);
}
exports.deleteTempDir = deleteTempDir;
function copyFile(src, dest) {
    ensureDir(path_1.default.dirname(dest));
    return fs_extra_1.default.copyFileSync(src, dest);
}
exports.copyFile = copyFile;
function copyFiles(src, dest) {
    src.forEach((srcPath) => {
        const file = path_1.default.basename(srcPath);
        copyFile(srcPath, path_1.default.join(dest, file));
    });
}
exports.copyFiles = copyFiles;
function copyDir(srcDir, destDir, { filter = () => true, overwrite = true, errorOnExist = false } = {}) {
    return fs_extra_1.default.copySync(srcDir, destDir, { filter, overwrite, errorOnExist });
}
exports.copyDir = copyDir;
function emptyDir(dir) {
    return fs_extra_1.default.emptyDirSync(dir);
}
exports.emptyDir = emptyDir;
function readJSONFile(pth, opts) {
    if (opts && opts.checkpath && !fileExists(pth)) {
        return undefined;
    }
    return fs_extra_1.default.readJsonSync(pth, opts);
}
exports.readJSONFile = readJSONFile;
function writeJSONFile(pth, object, opts) {
    ensureFile(pth, true);
    return fs_extra_1.default.writeJsonSync(pth, object, opts);
}
exports.writeJSONFile = writeJSONFile;
