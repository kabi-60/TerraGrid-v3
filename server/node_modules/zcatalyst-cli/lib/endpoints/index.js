'use strict';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.commonAPI = exports.codeDeck = exports.gitHubAPI = exports.appSailAPI = exports.logAPI = exports.eventBusAPI = exports.functionsAPI = exports.applogicAPI = exports.bulkDSAPI = exports.apigAPI = exports.clientAPI = exports.datastoreAPI = exports.zcqlAPI = exports.queueAPI = exports.filestoreAPI = exports.cacheAPI = exports.sdkAPI = exports.envAPI = exports.projectAPI = exports.orgAPI = void 0;
const project_1 = require("../util_modules/project");
function orgAPI({ auth = true } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const org = (yield Promise.resolve().then(() => __importStar(require('./lib/org')))).default;
        return new org({ authNeeded: auth });
    });
}
exports.orgAPI = orgAPI;
function projectAPI({ auth = true, org = (0, project_1.getEnvId)() } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const project = (yield Promise.resolve().then(() => __importStar(require('./lib/project')))).default;
        return new project({ authNeeded: auth }, org);
    });
}
exports.projectAPI = projectAPI;
function envAPI({ auth = true, org = (0, project_1.getEnvId)() } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const env = (yield Promise.resolve().then(() => __importStar(require('./lib/env')))).default;
        return new env({ authNeeded: auth }, org);
    });
}
exports.envAPI = envAPI;
function sdkAPI({ auth = true } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const sdk = (yield Promise.resolve().then(() => __importStar(require('./lib/sdk')))).default;
        return new sdk({ authNeeded: auth });
    });
}
exports.sdkAPI = sdkAPI;
function cacheAPI({ auth = true, projectId = (0, project_1.getProjectId)(), env = (0, project_1.getEnvName)() } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const cache = (yield Promise.resolve().then(() => __importStar(require('./lib/cache')))).default;
        return new cache(projectId, { authNeeded: auth, env });
    });
}
exports.cacheAPI = cacheAPI;
function filestoreAPI({ auth = true, projectId = (0, project_1.getProjectId)(), env = (0, project_1.getEnvName)() } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const filestore = (yield Promise.resolve().then(() => __importStar(require('./lib/filestore')))).default;
        return new filestore(projectId, { authNeeded: auth, env });
    });
}
exports.filestoreAPI = filestoreAPI;
function queueAPI({ auth = true, projectId = (0, project_1.getProjectId)(), env = (0, project_1.getEnvName)() } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const queue = (yield Promise.resolve().then(() => __importStar(require('./lib/queue')))).default;
        return new queue(projectId, { authNeeded: auth, env });
    });
}
exports.queueAPI = queueAPI;
function zcqlAPI({ auth = true, projectId = (0, project_1.getProjectId)(), env = (0, project_1.getEnvName)() } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const zcql = (yield Promise.resolve().then(() => __importStar(require('./lib/zcql')))).default;
        return new zcql(projectId, { authNeeded: auth, env });
    });
}
exports.zcqlAPI = zcqlAPI;
function datastoreAPI({ auth = true, projectId = (0, project_1.getProjectId)(), env = (0, project_1.getEnvName)() } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const datastore = (yield Promise.resolve().then(() => __importStar(require('./lib/datastore')))).default;
        return new datastore(projectId, { authNeeded: auth, env });
    });
}
exports.datastoreAPI = datastoreAPI;
function clientAPI({ auth = true, projectId = (0, project_1.getProjectId)(), env = (0, project_1.getEnvName)() } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = (yield Promise.resolve().then(() => __importStar(require('./lib/client')))).default;
        return new client(projectId, { authNeeded: auth, env });
    });
}
exports.clientAPI = clientAPI;
function apigAPI({ auth = true, projectId = (0, project_1.getProjectId)(), env = (0, project_1.getEnvName)() } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const apig = (yield Promise.resolve().then(() => __importStar(require('./lib/apig')))).default;
        return new apig(projectId, { authNeeded: auth, env });
    });
}
exports.apigAPI = apigAPI;
function bulkDSAPI({ auth = true, projectId = (0, project_1.getProjectId)(), env = (0, project_1.getEnvName)() } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const bulk = (yield Promise.resolve().then(() => __importStar(require('./lib/ds-bulk')))).default;
        return new bulk(projectId, { authNeeded: auth, env });
    });
}
exports.bulkDSAPI = bulkDSAPI;
function applogicAPI({ auth = true, projectId = (0, project_1.getProjectId)(), env = (0, project_1.getEnvName)() } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const applogic = (yield Promise.resolve().then(() => __importStar(require('./lib/applogic')))).default;
        return new applogic(projectId, { authNeeded: auth, env });
    });
}
exports.applogicAPI = applogicAPI;
function functionsAPI({ auth = true, projectId = (0, project_1.getProjectId)(), env = (0, project_1.getEnvName)() } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const functions = (yield Promise.resolve().then(() => __importStar(require('./lib/functions')))).default;
        return new functions(projectId, { authNeeded: auth, env });
    });
}
exports.functionsAPI = functionsAPI;
function eventBusAPI({ auth = true, projectId = (0, project_1.getProjectId)(), env = (0, project_1.getEnvName)() } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const event = (yield Promise.resolve().then(() => __importStar(require('./lib/event-bus')))).default;
        return new event(projectId, { authNeeded: auth, env });
    });
}
exports.eventBusAPI = eventBusAPI;
function logAPI({ auth = true, projectId = (0, project_1.getProjectId)(-1), env = (0, project_1.getEnvName)() } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        if (projectId === -1) {
            return;
        }
        const log = (yield Promise.resolve().then(() => __importStar(require('./lib/log')))).default;
        return new log(projectId, { authNeeded: auth, env });
    });
}
exports.logAPI = logAPI;
function appSailAPI({ auth = true, projectId = (0, project_1.getProjectId)(), env = (0, project_1.getEnvName)() } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const appSail = (yield Promise.resolve().then(() => __importStar(require('./lib/appsail.js')))).default;
        return new appSail(projectId, { authNeeded: auth, env });
    });
}
exports.appSailAPI = appSailAPI;
function gitHubAPI() {
    return __awaiter(this, void 0, void 0, function* () {
        const gitHub = (yield Promise.resolve().then(() => __importStar(require('./lib/git-hub')))).default;
        return new gitHub();
    });
}
exports.gitHubAPI = gitHubAPI;
function codeDeck() {
    return __awaiter(this, void 0, void 0, function* () {
        const codeDeck = (yield Promise.resolve().then(() => __importStar(require('./lib/code-deck')))).default;
        return new codeDeck({ authNeeded: false });
    });
}
exports.codeDeck = codeDeck;
function commonAPI() {
    return __awaiter(this, void 0, void 0, function* () {
        const common = (yield Promise.resolve().then(() => __importStar(require('./lib/common')))).default;
        return new common();
    });
}
exports.commonAPI = commonAPI;
