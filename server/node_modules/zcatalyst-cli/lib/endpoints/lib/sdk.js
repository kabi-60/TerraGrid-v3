'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const error_1 = __importDefault(require("../../error"));
const api_1 = __importDefault(require("../../internal/api"));
const constants_1 = require("../../util_modules/constants");
const logger_1 = require("../../util_modules/logger");
class SDK {
    constructor(opts) {
        this.opts = opts;
    }
    getSdkUrl(fnType, service) {
        switch (fnType) {
            case constants_1.FN_TYPE.integration: {
                if (!service) {
                    throw new error_1.default('Invalid integration service');
                }
                if (service === constants_1.INTEG.services.cliq) {
                    return `/downloads/sdk/java/${constants_1.INTEG.service_map[service]}/${constants_1.INTEG.java_dependencies[service]}_latest.zip`;
                }
                return '/downloads/sdk/java/catalyst_java_sdk_latest.zip';
            }
            default: {
                return '/downloads/sdk/java/catalyst_java_sdk_latest.zip';
            }
        }
    }
    java(fnType, service) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const targetSDK = this.getSdkUrl(fnType, service);
            const res = yield new api_1.default(this.opts).get(targetSDK, {
                json: false,
                encoding: null,
                origin: constants_1.ORIGIN.catalystStatic,
                headers: {
                    'Cache-Control': 'no-cache'
                },
                log: {
                    progress: {
                        title: (_a = targetSDK.split('/').pop()) === null || _a === void 0 ? void 0 : _a.replace(new RegExp('_', 'g'), '-')
                    }
                }
            });
            if (res.body) {
                return res.body;
            }
            (0, logger_1.debug)('java sdk response from server : ' + res.body);
            throw new error_1.default('Server Error: Unexpected Response from server.', {
                exit: 2
            });
        });
    }
}
exports.default = SDK;
