"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const console_1 = require("console");
const error_1 = __importDefault(require("../../error"));
const api_1 = __importDefault(require("../../internal/api"));
const constants_1 = require("../../util_modules/constants");
const ansi_colors_1 = require("ansi-colors");
class GitHub {
    constructor() {
        this.opts = {
            authNeeded: false,
            origin: constants_1.ORIGIN.external.gitHubAPI,
            isExternal: true
        };
    }
    getGitHubLatestRelease(repo) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).get(`/repos/catalystbyzoho/${repo}/releases/latest`);
            if (res.body) {
                return res.body;
            }
            (0, console_1.debug)('Get GitHub latest release response from server : ' + res.body);
            throw new error_1.default('Server Error: Unexpected Response from server.', {
                exit: 2
            });
        });
    }
    getLatestZipUrl(repo) {
        return __awaiter(this, void 0, void 0, function* () {
            const latest = yield this.getGitHubLatestRelease(repo);
            return new URL(latest.zipball_url).pathname;
        });
    }
    appsailNodejs() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).get(yield this.getLatestZipUrl('appsail-nodejs'), {
                encoding: null,
                log: { progress: { title: 'Code' } }
            });
            if (res.body) {
                return res.body;
            }
            (0, console_1.debug)('Code Download response from server : ' + res.body);
            throw new error_1.default('Server Error: Unexpected Response from server.', {
                exit: 2
            });
        });
    }
    appsailJava() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).get(yield this.getLatestZipUrl('appsail-java'), {
                encoding: null,
                log: { progress: { title: 'Code' } }
            });
            if (res.body) {
                return res.body;
            }
            (0, console_1.debug)('Code Download response from server : ' + res.body);
            throw new error_1.default('Server Error: Unexpected Response from server.', {
                exit: 2
            });
        });
    }
    appsailPython() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).get(yield this.getLatestZipUrl('appsail-python'), {
                encoding: null,
                log: { progress: { title: 'Code' } }
            });
            if (res.body) {
                return res.body;
            }
            (0, console_1.debug)('Code Download response from server : ' + res.body);
            throw new error_1.default('Server Error: Unexpected Response from server.', {
                exit: 2
            });
        });
    }
    validateUrl(url) {
        return __awaiter(this, void 0, void 0, function* () {
            let _url;
            try {
                _url = new URL(url);
            }
            catch (err) {
                throw new error_1.default('Invalid GitHub repo URL: ' + url, { original: err });
            }
            const res = yield new api_1.default({
                isExternal: true,
                showWarning: false,
                resolveOnError: true,
                authNeeded: false,
                headers: {
                    'Cache-control': 'no-cache'
                },
                origin: constants_1.ORIGIN.external.gitHubWeb
            }).head(_url.pathname);
            if (res.status) {
                return res.status;
            }
            (0, console_1.debug)('Git hub head response from server : ' + res.body);
            throw new error_1.default('Server Error: Unexpected Response from server.', {
                exit: 2
            });
        });
    }
    download(url, title) {
        return __awaiter(this, void 0, void 0, function* () {
            const _url = new URL(url);
            const reqOpts = {
                json: false,
                encoding: null,
                resolveOnError: true
            };
            if (title !== null) {
                reqOpts.log = {
                    progress: {
                        title: 'CodeLib' + (title ? ` (${title})` : ''),
                        failure: (err) => {
                            return (0, ansi_colors_1.red)(`CodeLib download failure with error: ` +
                                (err instanceof Error ? err.message : err) || 'Unknown error');
                        }
                    }
                };
            }
            const res = yield new api_1.default({ origin: constants_1.ORIGIN.external.gitHubWeb }).get(_url.pathname +
                (_url.pathname.endsWith('/') ? '' : '/') +
                'releases/latest/download/release.zip', reqOpts);
            if (res.status === 200 && res.body) {
                return res.body;
            }
            return;
        });
    }
}
exports.default = GitHub;
