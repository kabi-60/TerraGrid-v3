'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const error_1 = __importDefault(require("../../error"));
const api_1 = __importDefault(require("../../internal/api"));
const logger_1 = require("../../util_modules/logger");
const project_1 = require("../../util_modules/project");
class IacAPI {
    constructor(projectId, opts) {
        this.opts = opts || { env: (0, project_1.getEnvName)() };
        this.projectId = projectId || (0, project_1.getProjectId)('');
    }
    deploy(projectName, format, file, schedule = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).post('/baas/v1/project/import', {
                formData: {
                    project_name: projectName,
                    template_format: format,
                    code: file,
                    schedule: schedule.toString()
                },
                json: false
            });
            if (res.body && res.body.data) {
                return res.body.data;
            }
            (0, logger_1.debug)('deploy response from server : ' + JSON.stringify(res.body));
            throw new error_1.default('Server Error: Unexpected Response from server.', { exit: 2 });
        });
    }
    update(file) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).put(`/baas/v1/project/${this.projectId}/import`, {
                formData: {
                    code: file
                },
                json: false
            });
            if (res.body && res.body.data) {
                return res.body.data;
            }
            (0, logger_1.debug)('deploy response from server : ' + JSON.stringify(res.body));
            throw new error_1.default('Server Error: Unexpected Response from server.', { exit: 2 });
        });
    }
    bundle(format) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).post(`/baas/v1/project/${this.projectId}/export`, {
                body: {
                    template_format: format
                },
                json: true
            });
            if (res.body && res.body.data) {
                return res.body.data;
            }
            (0, logger_1.debug)('bundle response from server : ' + JSON.stringify(res.body));
            throw new error_1.default('Server Error: Unexpected Response from server.', { exit: 2 });
        });
    }
    bundleStatus() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).get(`/baas/v1/project/${this.projectId}/export/status`);
            if (res.body && res.body.data) {
                return res.body.data;
            }
            (0, logger_1.debug)('bundle status response from server : ' + JSON.stringify(res.body));
            throw new error_1.default('Server Error: Unexpected Response from server.', { exit: 2 });
        });
    }
    bundleDownload() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).get(`/baas/v1/project/${this.projectId}/export/download`, {
                json: false,
                encoding: null,
                log: {
                    progress: {
                        title: 'Project ZIP'
                    }
                }
            });
            if (res.body) {
                return res.body;
            }
            (0, logger_1.debug)('bundle status response from server : ' + JSON.stringify(res.body));
            throw new error_1.default('Server Error: Unexpected Response from server.', { exit: 2 });
        });
    }
    allDeploys() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).get(`/baas/v1/project/import`);
            if (res.body && res.body.data) {
                return res.body.data;
            }
            (0, logger_1.debug)('export response from server : ' + JSON.stringify(res.body));
            throw new error_1.default('Server Error: Unexpected Response from server.', { exit: 2 });
        });
    }
    deployStatus(importId) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).get(`/baas/v1/project/import/${importId}`);
            if (res.body && res.body.data) {
                return res.body.data;
            }
            (0, logger_1.debug)('export response from server : ' + JSON.stringify(res.body));
            throw new error_1.default('Server Error: Unexpected Response from server.', { exit: 2 });
        });
    }
    deployDelete(importId) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).delete(`/baas/v1/project/import/${importId}`);
            if (res.body && res.body.data) {
                return res.body.data;
            }
            (0, logger_1.debug)('export response from server : ' + JSON.stringify(res.body));
            throw new error_1.default('Server Error: Unexpected Response from server.', { exit: 2 });
        });
    }
    deployDownload(importId) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).get(`/baas/v1/project/import/${importId}/download`, {
                json: false,
                encoding: null,
                log: {
                    progress: {
                        title: 'Staged project archive'
                    }
                }
            });
            if (res.body) {
                return res.body;
            }
            (0, logger_1.debug)('export response from server : ' + JSON.stringify(res.body));
            throw new error_1.default('Server Error: Unexpected Response from server.', { exit: 2 });
        });
    }
}
exports.default = IacAPI;
