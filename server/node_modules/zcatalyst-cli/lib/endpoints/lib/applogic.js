'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const error_1 = __importDefault(require("../../error"));
const api_1 = __importDefault(require("../../internal/api"));
const logger_1 = require("../../util_modules/logger");
class Applogic {
    constructor(projectId, opts) {
        this.opts = opts;
        this.projectId = projectId;
    }
    deploy(sourceFsStream, { stack, name, memory, envVariables, contentLength }) {
        return __awaiter(this, void 0, void 0, function* () {
            const formData = {
                stack,
                name
            };
            if (sourceFsStream !== undefined) {
                formData.code = sourceFsStream;
            }
            const configuration = {};
            if (memory !== undefined) {
                configuration.memory = memory;
            }
            if (envVariables !== undefined) {
                configuration.environment = {
                    variables: envVariables
                };
            }
            if (Object.keys(configuration).length > 0) {
                formData.configuration = JSON.stringify(configuration);
            }
            const log = contentLength
                ? {
                    uploadProgress: {
                        title: `[${name}]`,
                        total: contentLength,
                        progressType: 'upload'
                    },
                    stream: sourceFsStream,
                    awaitingSpinner: `deploying function [${name}]`
                }
                : undefined;
            const res = yield new api_1.default(this.opts).put(`/baas/v1/project/${this.projectId}/server/upsert`, {
                formData,
                headers: {
                    'Content-Type': 'application/zip'
                },
                json: false,
                log
            });
            if (res.body && res.body.data) {
                return res.body.data;
            }
            (0, logger_1.debug)('save applogic response from server : ' + res.body);
            throw new error_1.default('Server Error: Unexpected Response from server.', {
                exit: 2
            });
        });
    }
    getAllApplogic() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).get(`/baas/v1/project/${this.projectId}/server`);
            if (res.body && res.body.data) {
                return res.body.data;
            }
            (0, logger_1.debug)('get applogic response from server : ' + res.body);
            throw new error_1.default('Server Error: Unexpected Response from server.', {
                exit: 2
            });
        });
    }
    download(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).get(`/baas/v1/project/${this.projectId}/server/download`, {
                json: false,
                encoding: null,
                qs: {
                    name
                }
            });
            if (res.body) {
                return res.body;
            }
            (0, logger_1.debug)('java sdk response from server : ' + res.body);
            throw new error_1.default('Server Error: Unexpected Response from server.', {
                exit: 2
            });
        });
    }
    delete(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).delete(`/baas/v1/project/${this.projectId}/server/${id}`);
            if (res.body && res.body.data) {
                return res.body.data;
            }
            (0, logger_1.debug)('delete applogic response from server : ' + res.body);
            throw new error_1.default('Server Error: Unexpected Response from server.', {
                exit: 2
            });
        });
    }
}
exports.default = Applogic;
