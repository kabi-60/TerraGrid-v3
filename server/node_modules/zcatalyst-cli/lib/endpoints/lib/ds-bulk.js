'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const error_1 = __importDefault(require("../../error"));
const api_1 = __importDefault(require("../../internal/api"));
const logger_1 = require("../../util_modules/logger");
class BulkDS {
    constructor(projectId, opts) {
        this.opts = opts;
        this.projectId = projectId;
    }
    postData(path, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).post(path, options);
            if (res.body && res.body.data) {
                return res.body.data;
            }
            (0, logger_1.debug)('bulk response from server : ' + res.body);
            throw new error_1.default('Server Error: Unexpected Response from server.', {
                exit: 2
            });
        });
    }
    read(table, config) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.postData(`/baas/v1/project/${this.projectId}/bulk/read`, {
                body: {
                    table_identifier: table,
                    query: config === null || config === void 0 ? void 0 : config.query,
                    callback: config === null || config === void 0 ? void 0 : config.callback
                },
                json: true
            });
        });
    }
    write(table, config) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.postData(`/baas/v1/project/${this.projectId}/bulk/write`, {
                body: {
                    table_identifier: table,
                    operation: config === null || config === void 0 ? void 0 : config.operation,
                    file_id: config === null || config === void 0 ? void 0 : config.file_id,
                    callback: config === null || config === void 0 ? void 0 : config.callback,
                    find_by: config === null || config === void 0 ? void 0 : config.find_by,
                    fk_mapping: config === null || config === void 0 ? void 0 : config.fk_mapping
                },
                json: true
            });
        });
    }
    getStatus(operation, jobid, prev = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).get(`/baas/v1/project/${this.projectId}/bulk/${operation}/${jobid}/report`, {
                qs: {
                    prev
                }
            });
            if (res.body && res.body.data) {
                return res.body.data;
            }
            (0, logger_1.debug)('getStatus response from server : ' + res.body);
            throw new error_1.default('Server Error: Unexpected Response from server.', {
                exit: 2
            });
        });
    }
    getReport(operation, jobid) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).get(`/baas/v1/project/${this.projectId}/bulk/${operation}/${jobid}`);
            if (res.body && res.body.data) {
                return res.body.data;
            }
            (0, logger_1.debug)('getReport response from server : ' + res.body);
            throw new error_1.default('Server Error: Unexpected Response from server.', {
                exit: 2
            });
        });
    }
    getAllJobs(operation) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).get(`/baas/v1/project/${this.projectId}/bulk/${operation}`);
            if (res.body && res.body.data) {
                return res.body.data;
            }
            (0, logger_1.debug)('getAllJobs response from server : ' + res.body);
            throw new error_1.default('Server Error: Unexpected Response from server.', {
                exit: 2
            });
        });
    }
    downloadReport(url, fileName) {
        return __awaiter(this, void 0, void 0, function* () {
            const downloadURL = new URL(url);
            const res = yield new api_1.default(this.opts).get(downloadURL.pathname, {
                origin: downloadURL.origin,
                json: false,
                encoding: null,
                log: {
                    progress: {
                        title: fileName
                    }
                }
            });
            if (res.body) {
                return res.body;
            }
            (0, logger_1.debug)('download report response from server : ' + res.body);
            throw new error_1.default('Server Error: Unexpected Response from server.', {
                exit: 2
            });
        });
    }
}
exports.default = BulkDS;
