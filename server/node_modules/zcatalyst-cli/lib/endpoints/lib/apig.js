'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const error_1 = __importDefault(require("../../error"));
const api_1 = __importDefault(require("../../internal/api"));
const logger_1 = require("../../util_modules/logger");
class Apig {
    constructor(projectId, opts) {
        this.opts = opts;
        this.projectId = projectId;
    }
    getRules(from, apiCount) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).get(`/baas/v1/project/${this.projectId}/api-gateway/api`, {
                qs: {
                    start: from,
                    num_of_apis: apiCount,
                    enhance: true
                }
            });
            if (res.body && res.body.data) {
                return res.body.data;
            }
            (0, logger_1.debug)('get all apis response from server : ' + res.body);
            throw new error_1.default('Server Error: Unexpected Response from server.', {
                exit: 2
            });
        });
    }
    deploy(sourceStream) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).put(`/baas/v1/project/${this.projectId}/api-gateway/api`, {
                formData: {
                    config_file: sourceStream
                },
                json: false
            });
            if (res.body && res.body.data) {
                return res.body.data;
            }
            (0, logger_1.debug)('deploy APIG response from server : ' + res.body);
            throw new error_1.default('Server Error: Unexpected Response from server.', {
                exit: 2
            });
        });
    }
    getAllRules() {
        return __awaiter(this, void 0, void 0, function* () {
            let rules = [];
            let from = 1;
            const apiCount = 200;
            let result = yield this.getRules(from, apiCount);
            while (result.length === 200) {
                rules = [...rules, ...result];
                from = from + apiCount;
                result = yield this.getRules(from, apiCount);
            }
            return [...rules, ...result];
        });
    }
    getAPIGStatus() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).get(`/baas/v1/project/${this.projectId}/api-gateway`);
            if (res.body && res.body.data) {
                return res.body.data;
            }
            (0, logger_1.debug)('get all apis response from server : ' + res.body);
            throw new error_1.default('Server Error: Unexpected Response from server.', {
                exit: 2
            });
        });
    }
    getScheduleReport(prev = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).get(`/baas/v1/project/${this.projectId}/api-gateway/schedule`, {
                qs: {
                    prev
                }
            });
            if (res.body && res.body.data) {
                return res.body.data;
            }
            (0, logger_1.debug)('getScheduleReport response from server : ' + res.body);
            throw new error_1.default('Server Error: Unexpected Response from server.', {
                exit: 2
            });
        });
    }
    updateAPIGStatus(status) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).put(`/baas/v1/project/${this.projectId}/api-gateway`, {
                body: {
                    status
                },
                json: true
            });
            if (res.body && res.body.data) {
                return res.body.data;
            }
            (0, logger_1.debug)('change status of APIG response from server : ' + res.body);
            throw new error_1.default('Server Error: Unexpected Response from server.', {
                exit: 2
            });
        });
    }
}
exports.default = Apig;
