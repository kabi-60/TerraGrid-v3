"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ansi_colors_1 = require("ansi-colors");
const api_1 = __importDefault(require("../../internal/api"));
const logger_1 = require("../../util_modules/logger");
const error_1 = __importDefault(require("../../error"));
class Common {
    download(url, title) {
        return __awaiter(this, void 0, void 0, function* () {
            const _url = new URL(url);
            const reqOpts = {
                json: false,
                encoding: null,
                resolveOnError: true,
                origin: _url.origin
            };
            if (title) {
                reqOpts.log = {
                    progress: {
                        title,
                        failure: (err) => (0, ansi_colors_1.red)(`Download failure with error: ` +
                            (err instanceof Error ? err.message : err) || 'Unknown error')
                    }
                };
            }
            const res = yield new api_1.default({ isExternal: true, authNeeded: false }).get(_url.pathname, reqOpts);
            if (res.status === 200 && res.body) {
                return res.body;
            }
            (0, logger_1.debug)('Download response from server : ' + res.body);
            throw new error_1.default('Server Error: Unexpected Response from server.', {
                exit: 2
            });
        });
    }
}
exports.default = Common;
